<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojure | (xu-hao-jun)]]></title>
  <link href="http://XuHaoJun.github.io/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://XuHaoJun.github.io/"/>
  <updated>2014-05-11T23:45:21+08:00</updated>
  <id>http://XuHaoJun.github.io/</id>
  <author>
    <name><![CDATA[XuHaoJun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[黑白棋 (Clojurescript)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2014-05-11-clojurescript-reversi-game.html"/>
    <updated>2014-05-11T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/clojurescript-reversi-game</id>
    <content type="html"><![CDATA[<p>
一個簡單的單機網頁(html5)黑白棋遊戲。
</p><p>
<a href='https://xuhaojun.github.io/reversi/'>Try it Online</a>
</p><p>
<a href='https://github.com/XuHaoJun/reversi'>Source code</a>
</p><p>
<!-- more -->
</p><div class='outline-2' id='outline-container-sec-1'>
<h2 id='sec-1'>實現算法</h2>
<div class='outline-text-2' id='text-1'>
<p>
每次下棋對其八個鄰近方格做掃描，如果是相反顏色的棋子，就往其方位向前找到另一個相同顏色的棋子，若有找到則翻棋，沒有則遍歷下一個方位。
</p>
</div>
</div><div class='outline-2' id='outline-container-sec-2'>
<h2 id='sec-2'>電腦(AI)下棋算法</h2>
<div class='outline-text-2' id='text-2'>
<p>
暫時隨機，在看用哪種好。
</p>
</div>
</div><div class='outline-2' id='outline-container-sec-3'>
<h2 id='sec-3'>Clojurescript 使用心得</h2>
<div class='outline-text-2' id='text-3'>
<p>
一堆括號阿！！每次都要讓函數回傳有意義的值，Debug 起來也很容易，一個函數影響的範圍就只有他的參數而已，沒有隱示參數(全域變數、成員變數)的話就很好測試，每個函數就盡量小小的做一件事，不過到使用 <a href='https://github.com/photonstorm/phaser'>phaser</a> (javascript html5 game framework)那層就一堆副作用囉!(set! xxx yyy)。
</p>
</div>
</div><div class='outline-2' id='outline-container-sec-4'>
<h2 id='sec-4'>截圖</h2>
<div class='outline-text-2' id='text-4'>

<div class='figure'>
<p><img alt='reversi-game.png' src='./img/reversi-game.png' />
</p>
</div>
</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure 遞迴測試]]></title>
    <link href="http://XuHaoJun.github.io/blog/2014-05-10-clojure-recursion.html"/>
    <updated>2014-05-10T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/clojure-recursion</id>
    <content type="html"><![CDATA[<p>
<a href='http://clojure.org/functional_programming#Functional%2520Programming--Recursive%2520Looping'>Clojure Recursive Looping</a>
</p><div class='outline-2' id='outline-container-sec-1'>
<h2 id='sec-1'>傳統遞迴</h2>
<div class='outline-text-2' id='text-1'>
</div><div class='outline-3' id='outline-container-sec-1-1'>
<h3 id='sec-1-1'>Source</h3>
<div class='outline-text-3' id='text-1-1'>
<div class='org-src-container'>

<pre class='src src-clojure'>(<span style='color: #859900; font-weight: bold;'>defn</span> <span style='color: #268bd2;'>deepable-recur?</span> [deep-length]
  (<span style='color: #859900; font-weight: bold;'>if</span> (<span style='color: #839496; font-weight: bold;'>=</span> 0 deep-length)
    true
    (deepable-recur? (<span style='color: #839496; font-weight: bold;'>dec</span> deep-length))))
</pre>
</div>

<p>
<!-- more -->
</p>
</div>
</div>
<div class='outline-3' id='outline-container-sec-1-2'>
<h3 id='sec-1-2'>Test</h3>
<div class='outline-text-3' id='text-1-2'>
<ul class='org-ul'>
<li>一個很蠢的測試函式：
</li>
</ul>
<div class='org-src-container'>

<pre class='src src-clojure'>(<span style='color: #859900; font-weight: bold;'>defn</span> <span style='color: #268bd2;'>deep-test</span> [start end step deep-fn]
  (<span style='color: #859900; font-weight: bold;'>doseq</span> [length (<span style='color: #839496; font-weight: bold;'>range</span> start end step)]
    (<span style='color: #859900; font-weight: bold;'>if</span> (deep-fn length)
      (<span style='color: #839496; font-weight: bold;'>println</span> length <span style='color: #2aa198;'>"Deep Done!"</span>))))
(deep-test 5000 10000 1000 deepable-recur?)
<span style='color: #586e75;'>;;; </span><span style='color: #586e75;'>output-&gt;</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>5000 Deep Done!</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>6000 Deep Done!</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>7000 Deep Done!</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>8000 Deep Done!</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>StackOverflowError   clojure.lang.Numbers$LongOps.combine (Numbers.java:394)</span>
</pre>
</div>
</div>
</div>
</div><div class='outline-2' id='outline-container-sec-2'>
<h2 id='sec-2'>Clojure recur special operator</h2>
<div class='outline-text-2' id='text-2'>
</div><div class='outline-3' id='outline-container-sec-2-1'>
<h3 id='sec-2-1'>Source</h3>
<div class='outline-text-3' id='text-2-1'>
<div class='org-src-container'>

<pre class='src src-clojure'>(<span style='color: #859900; font-weight: bold;'>defn</span> <span style='color: #268bd2;'>deepable-recur?</span> [deep-length]
  (<span style='color: #859900; font-weight: bold;'>loop</span> [len deep-length]
    (<span style='color: #859900; font-weight: bold;'>if</span> (<span style='color: #839496; font-weight: bold;'>=</span> 0 len)
      true
      (<span style='color: #859900; font-weight: bold;'>recur</span> (<span style='color: #839496; font-weight: bold;'>dec</span> len)))))
</pre>
</div>
</div>
</div>

<div class='outline-3' id='outline-container-sec-2-2'>
<h3 id='sec-2-2'>Test</h3>
<div class='outline-text-3' id='text-2-2'>
<div class='org-src-container'>

<pre class='src src-clojure'>(deep-test 60000000 80000000 2000000 deepable-recur?)
<span style='color: #586e75;'>;;; </span><span style='color: #586e75;'>output-&gt;</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>60000000 Deep Done!</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>62000000 Deep Done!</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>64000000 Deep Done!</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>66000000 Deep Done!</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>68000000 Deep Done!</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>70000000 Deep Done!</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>72000000 Deep Done!</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>74000000 Deep Done!</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>76000000 Deep Done!</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>78000000 Deep Done!</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>nil</span>
</pre>
</div>
</div>
</div>
</div><div class='outline-2' id='outline-container-sec-3'>
<h2 id='sec-3'>Clojure trampoline</h2>
<div class='outline-text-2' id='text-3'>
</div><div class='outline-3' id='outline-container-sec-3-1'>
<h3 id='sec-3-1'>Source</h3>
<div class='outline-text-3' id='text-3-1'>
<div class='org-src-container'>

<pre class='src src-clojure'>(<span style='color: #859900; font-weight: bold;'>defn</span> <span style='color: #268bd2;'>deepable-recur?</span> [deep-length]
  (<span style='color: #859900; font-weight: bold;'>if</span> (<span style='color: #839496; font-weight: bold;'>=</span> 0 deep-length)
    true
    #(deepable-recur? (<span style='color: #839496; font-weight: bold;'>dec</span> deep-length))))
</pre>
</div>
</div>
</div>

<div class='outline-3' id='outline-container-sec-3-2'>
<h3 id='sec-3-2'>Test</h3>
<div class='outline-text-3' id='text-3-2'>
<p>
比上面那個慢多了。
</p>
<div class='org-src-container'>

<pre class='src src-clojure'>(<span style='color: #839496; font-weight: bold;'>trampoline</span> deepable-recur? 70000000)
<span style='color: #586e75;'>;;; </span><span style='color: #586e75;'>output-&gt;</span>
<span style='color: #586e75;'>;; </span><span style='color: #586e75;'>true</span>
</pre>
</div>
</div>
</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure/Clojurescript Emacs 開發環境]]></title>
    <link href="http://XuHaoJun.github.io/blog/2014-05-06-writing-clojure-in-emacs.html"/>
    <updated>2014-05-06T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/writing-clojure-in-emacs</id>
    <content type="html"><![CDATA[<div id='table-of-contents'>
<h2>Table of Contents</h2>
<div id='text-table-of-contents'>
<ul>
<li><a href='#sec-1'>基本功能安裝</a></li>
<li><a href='#sec-2'>強力插件: CIDER (Clojure IDE and REPL)</a>
<ul>
<li><a href='#sec-2-1'>安裝</a></li>
<li><a href='#sec-2-2'>REPL (交互式編程環境)</a></li>
<li><a href='#sec-2-3'>Browser REPL (for clojurescript)</a></li>
<li><a href='#sec-2-4'>自動補全</a></li>
</ul>
</li>
<li><a href='#sec-3'>其他插件推薦</a></li>
<li><a href='#sec-4'>截圖</a></li>
</ul>
</div>
</div><p>
簡單的 clojure/clojurescript 開發環境。
</p><p>
<!-- more -->
</p><div class='outline-2' id='outline-container-sec-1'>
<h2 id='sec-1'>基本功能安裝</h2>
<div class='outline-text-2' id='text-1'>
<p>
推薦從 emacs 24 起，自帶的 package 系統來安裝。
</p>

<p>
首先加入更多 package 的安裝來源 <a href='http://melpa.milkbox.net'>melpa</a> <a href='http://marmalade-repo.org/'>marmalade</a>
</p>
<div class='org-src-container'>

<pre class='src src-emacs-lisp'>(<span style='color: #859900; font-weight: bold;'>defvar</span> <span style='color: #268bd2;'>marmalade</span> '(<span style='color: #2aa198;'>"marmalade"</span> . <span style='color: #2aa198;'>"http://marmalade-repo.org/packages/"</span>))
(<span style='color: #859900; font-weight: bold;'>defvar</span> <span style='color: #268bd2;'>gnu</span> '(<span style='color: #2aa198;'>"gnu"</span> . <span style='color: #2aa198;'>"http://elpa.gnu.org/packages/"</span>))
(<span style='color: #859900; font-weight: bold;'>defvar</span> <span style='color: #268bd2;'>melpa</span> '(<span style='color: #2aa198;'>"melpa"</span> . <span style='color: #2aa198;'>"http://melpa.milkbox.net/packages/"</span>))

(add-to-list 'package-archives marmalade)
(add-to-list 'package-archives melpa t)

(package-initialize)
</pre>
</div>

<p>
安裝 clojure-mode：
<code>M-x package-install</code> <code>clojure-mode</code>
</p>

<p>
這樣就有基本的代碼高亮和縮進功能了。
</p>
</div>
</div><div class='outline-2' id='outline-container-sec-2'>
<h2 id='sec-2'>強力插件: CIDER (Clojure IDE and REPL)</h2>
<div class='outline-text-2' id='text-2'>
<p>
<a href='https://github.com/clojure-emacs/cider'>CIDER-github</a>
</p>
</div>
<div class='outline-3' id='outline-container-sec-2-1'>
<h3 id='sec-2-1'>安裝</h3>
<div class='outline-text-3' id='text-2-1'>
<p>
<code>M-x package-install</code> <code>cider</code>
</p>
</div>
</div>

<div class='outline-3' id='outline-container-sec-2-2'>
<h3 id='sec-2-2'>REPL (交互式編程環境)</h3>
<div class='outline-text-3' id='text-2-2'>
<p>
<a href='https://zh.wikipedia.org/wiki/%25E8%25AF%25BB%25E5%258F%2596%25EF%25B9%25A3%25E6%25B1%2582%25E5%2580%25BC%25EF%25B9%25A3%25E8%25BE%2593%25E5%2587%25BA%25E5%25BE%25AA%25E7%258E%25AF'>REPL-wiki</a>
</p>
</div>

<div class='outline-4' id='outline-container-sec-2-2-1'>
<h4 id='sec-2-2-1'>安裝：</h4>
<div class='outline-text-4' id='text-2-2-1'>
<p>
推薦使用<a href='http://leiningen.org/'>leiningen</a> 來管理你的 clojure project.
</p>

<p>
<code>lein new myproject</code>
</p>

<p>
安裝 <a href='https://github.com/clojure-emacs/cider-nrepl'>cider-nrepl</a>
在 <code>~/.lein/profiles.clj</code> 加入以下兩行
</p>
<div class='org-src-container'>

<pre class='src src-clojure'>{<span style='color: #268bd2; font-weight: bold;'>:user</span>
 {<span style='color: #268bd2; font-weight: bold;'>:plugins</span> [[cider/cider-nrepl <span style='color: #2aa198;'>"0.7.0-SNAPSHOT"</span>]]}}
</pre>
</div>
</div>
</div>

<div class='outline-4' id='outline-container-sec-2-2-2'>
<h4 id='sec-2-2-2'>使用：</h4>
<div class='outline-text-4' id='text-2-2-2'>
<p>
接下來在你的 emacs 執行 <code>M-x cider-jack-in</code>
沒有意外的話，會出現一個 repl 的 buffer，關掉是 <code>cider-quit</code> 。
</p>

<p>
幾個必用的 emacs function , 把他們綁在你喜歡的 key 上吧。
<code>cider-eval-last-sexp</code> , <code>cider-eval-defun-at-point</code> ,
<code>cider-switch-to-repl-buffer</code> , <code>cider-jump</code>
</p>
</div>
</div>
</div>

<div class='outline-3' id='outline-container-sec-2-3'>
<h3 id='sec-2-3'>Browser REPL (for clojurescript)</h3>
<div class='outline-text-3' id='text-2-3'>
<p>
<a href='https://github.com/cemerick/austin'>Austin-github</a> <a href='https://github.com/cemerick/austin/tree/master/browser-connected-repl-sample'>專案範例</a>
在 <code>~/.lein/profiles.clj</code> 加入以下兩行
</p>
<div class='org-src-container'>

<pre class='src src-clojure'>{<span style='color: #268bd2; font-weight: bold;'>:user</span>
 {<span style='color: #268bd2; font-weight: bold;'>:plugins</span> [[com.cemerick/austin <span style='color: #2aa198;'>"0.1.4"</span>]]}}
</pre>
</div>

<p>
在你的 cljs 檔案裡的 namespace 新增：
</p>
<div class='org-src-container'>

<pre class='src src-clojure'>(<span style='color: #268bd2; font-weight: bold;'>:require</span> [clojure.browser.repl])
</pre>
</div>

<p>
在 REPL 的環境裡：
</p>
<div class='org-src-container'>

<pre class='src src-clojure'>(<span style='color: #859900; font-weight: bold;'>def</span> <span style='color: #268bd2;'>repl-env</span> (<span style='color: #839496; font-weight: bold;'>reset!</span> cemerick.austin.repls/browser-repl-env
                      (cemerick.austin/repl-env)))
(cemerick.austin.repls/cljs-repl repl-env)
</pre>
</div>

<p>
接下來在新的 REPL 環境裡：
</p>

<div class='org-src-container'>

<pre class='src src-clojure'>(js/alert <span style='color: #2aa198;'>"hello browser"</span>)
</pre>
</div>

<p>
你的 browser 應該會有反應。
</p>
</div>
</div>

<div class='outline-3' id='outline-container-sec-2-4'>
<h3 id='sec-2-4'>自動補全</h3>
<div class='outline-text-3' id='text-2-4'>
<p>
<a href='https://github.com/company-mode/company-mode'>company-mode-github</a>
</p>
</div>

<div class='outline-4' id='outline-container-sec-2-4-1'>
<h4 id='sec-2-4-1'>安裝：</h4>
<div class='outline-text-4' id='text-2-4-1'>
<p>
<code>M-x package-install</code> <code>company</code>
</p>

<p>
開啟：
<code>M-x global-company-mode</code>
</p>

<p>
預設開啟：在你的 init.el 加入這行。
</p>
<div class='org-src-container'>

<pre class='src src-emacs-lisp'>(global-company-mode)
</pre>
</div>
</div>
</div>

<div class='outline-4' id='outline-container-sec-2-4-2'>
<h4 id='sec-2-4-2'>使用：</h4>
<div class='outline-text-4' id='text-2-4-2'>
<p>
必須在你的 repl 開啟的時候才有效！
</p>

<p>
<code>M-n</code>, <code>M-p</code> 上下選擇候選鍵。
</p>


<div class='figure'>
<p><img alt='company-elisp.png' src='https://company-mode.github.io/images/company-elisp.png' />
</p>
</div>
</div>
</div>
</div>
</div><div class='outline-2' id='outline-container-sec-3'>
<h2 id='sec-3'>其他插件推薦</h2>
<div class='outline-text-2' id='text-3'>
<p>
<a href='https://github.com/jlr/rainbow-delimiters'>rainbow-delimiters</a>
</p>

<p>
<a href='https://gitorious.org/evil/pages/Home'>evil</a>
</p>

<p>
<a href='http://www.emacswiki.org/emacs/InteractivelyDoThings'>ido</a>
</p>
</div>
</div><div class='outline-2' id='outline-container-sec-4'>
<h2 id='sec-4'>截圖</h2>
<div class='outline-text-2' id='text-4'>

<div class='figure'>
<p><img alt='emacs-clojure-development.png' src='./img/emacs-clojure-development.png' />
</p>
</div>
</div>
</div>]]></content>
  </entry>
  
</feed>
