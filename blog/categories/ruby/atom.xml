<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | XuBlog]]></title>
  <link href="http://XuHaoJun.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://XuHaoJun.github.io/"/>
  <updated>2013-10-19T16:49:21+08:00</updated>
  <id>http://XuHaoJun.github.io/</id>
  <author>
    <name><![CDATA[XuHaoJun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby block match and jump (emacs evil-mode)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-10-19-evil-ruby-jump-item.html"/>
    <updated>2013-10-19T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/evil-ruby-jump-item</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Description</h2>
<div class="outline-text-2" id="text-1">
<p>
Emacs evil-mode <code>%</code> 功能加上 Ruby block 的配對，例如將光標放在 <code>class Foo</code> 上後鍵入 <code>%</code> 可以跳轉至相符的 <code>end</code> 。
</p>

<p>
<!-- more -->
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Example</h2>
<div class="outline-text-2" id="text-2">

<div class="figure">
<p><img src="./img/evil-ruby-jump-item.gif" alt="evil-ruby-jump-item.gif" />
</p>
</div>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Source Code</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #586e75;">;; </span><span style="color: #586e75;">Require package: (evil)</span>
(<span style="color: #859900; font-weight: bold;">evil-define-motion</span> <span style="color: #268bd2;">evil-ruby-jump-item</span> (count)
  <span style="color: #839496; font-weight: bold;">:jump</span> t
  <span style="color: #839496; font-weight: bold;">:type</span> inclusive
  (<span style="color: #859900; font-weight: bold;">cond</span> ((string-match ruby-block-beg-re (current-word))
         (ruby-end-of-block count))
        ((string-match ruby-block-end-re (current-word))
         (ruby-beginning-of-block count))
        (t
         (evil-jump-item count))))

(add-hook 'ruby-mode-hook
          (<span style="color: #859900; font-weight: bold;">lambda</span> ()
            (define-key evil-normal-state-local-map <span style="color: #2aa198;">"%"</span> 'evil-ruby-jump-item)
            (define-key evil-motion-state-local-map <span style="color: #2aa198;">"%"</span> 'evil-ruby-jump-item)))
</pre>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[帕斯卡三角形 (Ruby)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-09-03-pascal-triangle-ruby.html"/>
    <updated>2013-09-03T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/pascal-triangle-ruby</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">帕斯卡三角形</h2>
<div class="outline-text-2" id="text-1">

<div class="figure">
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/PascalTriangleAnimated2.gif/210px-PascalTriangleAnimated2.gif" align="right" alt="210px-PascalTriangleAnimated2.gif"/></p>
</div>

<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">pascal_triangle</span>(n, i = 2, result = [[1], [1,1]])
  <span style="color: #859900; font-weight: bold;">if</span> n == 1
    [[1]]
  <span style="color: #859900; font-weight: bold;">elsif</span> n == 2
    [[1], [1,1]]
  <span style="color: #859900; font-weight: bold;">elsif</span> i == n
    result
  <span style="color: #859900; font-weight: bold;">else</span>
    current_row = [1]
    (i-1).times <span style="color: #859900; font-weight: bold;">do</span> |n|
      current_row &lt;&lt; (result[i-1][n] + result[i-1][n+1])
    <span style="color: #859900; font-weight: bold;">end</span>
    current_row &lt;&lt; 1

    pascal_triangle(n, i+1, result &lt;&lt; current_row)
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<ul class="org-ul">
<li>Image reference: <a href="https://zh.wikipedia.org/zh-tw/%25E6%259D%25A8%25E8%25BE%2589%25E4%25B8%2589%25E8%25A7%2592%25E5%25BD%25A2">Pascal-triangle Wikipedia-chi</a>
</li>
</ul>
<p>
<!-- more -->
</p>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Output</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-ruby">pst = pascal_triangle(7)

puts pst.pretty_inspect

<span style="color: #586e75;">=begin</span>
<span style="color: #586e75;">[[1],</span>
<span style="color: #586e75;"> [1, 1],</span>
<span style="color: #586e75;"> [1, 2, 1],</span>
<span style="color: #586e75;"> [1, 3, 3, 1],</span>
<span style="color: #586e75;"> [1, 4, 6, 4, 1],</span>
<span style="color: #586e75;"> [1, 5, 10, 10, 5, 1],</span>
<span style="color: #586e75;"> [1, 6, 15, 20, 15, 6, 1]]</span>
<span style="color: #586e75;">=&gt; nil</span>
<span style="color: #586e75;">=end</span>
</pre>
</div>
</div>
</div>




<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Check</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-ruby">pst.map {|row| row.reduce(<span style="color: #268bd2; font-weight: bold;">:+</span>) == 2 ** (row.length - 1) }
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [true, true, true, true, true, true, true]</span>
</pre>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs 自動縮進 Ruby's if-else]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-29-emacs-ruby-if-else-intdent.html"/>
    <updated>2013-08-29T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/emacs-ruby-if-else-intdent</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Problem</h2>
<div class="outline-text-2" id="text-1">
<p>
當我打完 elsif 時，他應該要縮進到 if 那邊。
</p>
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">if</span>
   <span style="color: #859900; font-weight: bold;">elsif</span> <span style="color: #586e75;"># </span><span style="color: #586e75;">Should indent this line</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<p>
<!-- more -->
</p>

<p>
正確的 if-else 縮進：
</p>
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">if</span> 1&gt;2
  ....
<span style="color: #859900; font-weight: bold;">elsif</span>
  ...
<span style="color: #859900; font-weight: bold;">else</span>
  ...
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<p>
很明顯 else 和 elsif 是向 if 對齊縮進的。
</p>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Solution</h2>
<div class="outline-text-2" id="text-2">
<p>
發現在 Emacs 上沒有自動縮進 Ruby 的 if-else 語法後，去試了一下 vim 發現可以處理 if-else
的縮進，當然得跟上！
</p>

<p>
最簡單的方法就是在按 <code>space</code> 時，檢查前一個 word 是不是 <code>else</code> 或 <code>elsif</code> 。
</p>

<p>
首先我有用 ruby-electric，這東西會在你打 <code>if</code> 或 <code>class</code> 等等 自動產生一個 <code>end</code>
在下行，他是依據你打 <code>if&lt;space&gt;</code> 的 <code>&lt;space&gt;</code> 時會觸發產生一個 <code>end</code> 。
</p>

<p>
<code>&lt;space&gt;</code> 對應到 ruby-electric-space 這個 funciton，我從 ruby-electric 裡複製過來，很像不應該這樣做，不過不管了。
</p>

<p>
以下是修改過後的版本：
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">ruby-electric-space</span> (arg)
  (interactive <span style="color: #2aa198;">"P"</span>)
  (self-insert-command (prefix-numeric-value arg))
  (<span style="color: #859900; font-weight: bold;">cond</span> ((ruby-electric-space-can-be-expanded-p)
         (<span style="color: #859900; font-weight: bold;">save-excursion</span>
           (ruby-indent-line t)
           (newline)
           (ruby-electric-insert-end)))
        ((ruby-electric-space-can-be-indent-p) (ruby-indent-line t))))

(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">ruby-electric-space-can-be-indent-p</span> ()
  (and (ruby-electric-code-at-point-p)
       (ruby-electric-matching-word-p)))

(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">ruby-electric-matching-word-p</span> ()
  (<span style="color: #859900; font-weight: bold;">save-excursion</span>
    (backward-word)
    (string-match <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\&lt;else\\&gt;</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\&lt;elsif\\&gt;</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span> (current-word))))
</pre>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿姆斯壯數 (Ruby)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-27-armstrong-num-ruby.html"/>
    <updated>2013-08-27T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/armstrong-num-ruby</id>
    <content type="html"><![CDATA[<p>
寫一些簡單的演算法來熟悉 Ruby。
</p>


<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Armstrong number</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li><a href="https://zh.wikipedia.org/wiki/%25E6%25B0%25B4%25E4%25BB%2599%25E8%258A%25B1%25E6%2595%25B0">阿姆斯壯數 - WiKi</a>
</li>
</ul>
<p>
指一 N 位数，其各个数之 N 次方和等于该数。 <br/>
</p>

<p>
例如 153、370、371 及 407 就是三位數的水仙花数，其各个数之立方和等于该数： <br/>
<!-- more -->
<img src="ltxpng/2013-08-27-armstrong-num-ruby_e141c033bb0e669b266fc28f8d36f2011481ba63.png"  alt="$153 = 1^3 + 5^3 + 3^3$"/> <br/>
<img src="ltxpng/2013-08-27-armstrong-num-ruby_9eb5ee3740baed1f5a29bcd886e4d39db8abae6f.png"  alt="$370 = 3^3 + 7^3 + 0^3$"/> <br/>
<img src="ltxpng/2013-08-27-armstrong-num-ruby_06e1db69575b29de5a03efa3759af10c7e7d8c4c.png"  alt="$371 = 3^3 + 7^3 + 1^3$"/> <br/>
<img src="ltxpng/2013-08-27-armstrong-num-ruby_8b45137dca877cbbdfd1f5e616004b03035b6add.png"  alt="$407 = 4^3 + 0^3 + 7^3$"/>
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Source code</h2>
<div class="outline-text-2" id="text-2">
<p>
不曉得型別轉來轉去算不算壞習慣&#x2026;。 <br/>
</p>

<p>
有用到 lazy 這個 enumerator，如果沒用 lazy 的話就會當在那裡了，lazy 感覺很像是一個一個求值後在判斷在存值，沒有使用的話則一次全部求值後在做事。 <br/>
</p>

<p>
懶的想怎麼做優化了，怕到時候改一改可讀性就沒現在這個好了，先留這個作筆記。
</p>

<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">class</span> <span style="color: #b58900;">Integer</span>
  <span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">armstrong_num?</span> <span style="color: #586e75;"># </span><span style="color: #586e75;">may be have more better name..</span>
    sum = 0
    digits = <span style="color: #268bd2;">self</span>.to_s.length
    digits.times { |n| sum += (<span style="color: #268bd2;">self</span>.to_s[n].to_i ** digits) }
    <span style="color: #859900; font-weight: bold;">return</span> sum == <span style="color: #268bd2;">self</span>
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>

<span style="color: #586e75;"># </span><span style="color: #586e75;">&#19977;&#20301;&#25976;&#30340;&#25152;&#26377;&#38463;&#22982;&#26031;&#22767;&#25976;</span>
(100...1000).select{ |x| x.armstrong_num? }
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [153, 370, 371, 407]</span>

<span style="color: #586e75;"># </span><span style="color: #586e75;">&#22235;&#20301;&#25976;&#30340;&#31532;&#19968;&#20491;&#38463;&#22982;&#26031;&#22767;&#25976;</span>
(1000...10000).select{ |x| x.armstrong_num? }.first(1)
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [1634]</span>

<span style="color: #586e75;"># </span><span style="color: #586e75;">&#21069; 15 &#20491;&#38463;&#22982;&#26031;&#22767;&#25976;</span>
(1..<span style="color: #b58900;">Float</span>::<span style="color: #b58900;">INFINITY</span>).lazy.select{ |x| x.armstrong_num? }.first(15)
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407, 1634, 8208]</span>

<span style="color: #586e75;"># </span><span style="color: #586e75;">&#21069;&#19977;&#20491;&#38463;&#22982;&#26031;&#22767;&#25976;&#65292;&#24478;&#19977;&#20301;&#25976;&#38283;&#22987;</span>
(100..<span style="color: #b58900;">Float</span>::<span style="color: #b58900;">INFINITY</span>).lazy.select{ |x| x.armstrong_num? }.first(3)
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [153, 370, 371]</span>
</pre>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[產生一組不重複整數的集合(Ruby)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-25-gen-uniq-nums-ruby.html"/>
    <updated>2013-08-25T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/gen-uniq-nums-ruby</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">Normal Way - 1</a></li>
<li><a href="#sec-2">Normal Way - 2</a></li>
<li><a href="#sec-3">Set Way</a></li>
<li><a href="#sec-4">Range Way - 1</a></li>
<li><a href="#sec-5">Range Way - 2</a></li>
<li><a href="#sec-6">Benchmark them</a></li>
</ul>
</div>
</div>


<p>
先用 Ruby 寫以前上 Android 中猜數字範例中用到的算法：
</p>




<p>
<!-- more -->
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Normal Way - 1</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">get_uniq_nums</span>(size, range)
  ary = []
  <span style="color: #859900; font-weight: bold;">begin</span>
    r = rand(range)
    <span style="color: #859900; font-weight: bold;">if</span> ary.member?(r)
      <span style="color: #859900; font-weight: bold;">next</span>
    <span style="color: #859900; font-weight: bold;">else</span>
      ary &lt;&lt; r
    <span style="color: #859900; font-weight: bold;">end</span>
  <span style="color: #859900; font-weight: bold;">end</span> <span style="color: #859900; font-weight: bold;">while</span>( ary.length &lt; size )
  <span style="color: #859900; font-weight: bold;">return</span> ary
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<p>
記得之前教的不是用 member 的方法來判斷，當初沒有提到用到集合的概念寫，好像是檢查前面幾個數字的迴圈吧，那陀 Java 程式碼已經忘光了。
</p>

<p>
這是產生 4 個不重複 1~9 的數字，放在一個陣列裡面 <br/>
<code>get_uniq_nums(4, (1...10))</code> <br/>
</p>

<p>
變成一個數字，先 join 把他連在一起變成字串，在轉回數字。 <br/>
<code>get_uniq_nums(4, (1...10)).join.to_i</code> <br/>
</p>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Normal Way - 2</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">get_uniq_nums</span>(size, range, ary = [])
  <span style="color: #859900; font-weight: bold;">if</span> size.zero?
    ary
  <span style="color: #859900; font-weight: bold;">elsif</span> ary.member?(r = rand(range))
    get_uniq_nums(size , range, ary)
  <span style="color: #859900; font-weight: bold;">else</span>
    get_uniq_nums(size - 1, range, (ary &lt;&lt; r))
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>
<p>
試了別種寫法，很像叫尾遞迴的方法，跟普通遞迴好像差別在多用一個參數在存值，在
Emacs lisp 很像還要多用一個函數才能不影響原來的接口。順便一提，弄不出一個函數的普通遞迴方法。
</p>

<p>
以下是普通遞迴版失敗品：
</p>

<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">get_uniq_nums</span>(size, range)
  <span style="color: #859900; font-weight: bold;">if</span> size.zero?
    []
  <span style="color: #859900; font-weight: bold;">elsif</span> get_uniq_nums(size, range).member?(r = rand(range))
    get_uniq_nums(size, range)
  <span style="color: #859900; font-weight: bold;">else</span>
    get_uniq_nums(size - 1, range) &lt;&lt; r
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Set Way</h2>
<div class="outline-text-2" id="text-3">
<p>
放狗一搜，找到了其他方法：
</p>
<ul class="org-ul">
<li><a href="http://stackoverflow.com/questions/119107/how-do-i-generate-a-list-of-n-unique-random-numbers-in-ruby">How do I generate a list of n unique random numbers in Ruby?</a>
</li>
</ul>

<blockquote>
<p>
Set implements a collection of unordered values with no duplicates.
</p>
</blockquote>

<div class="org-src-container">

<pre class="src src-ruby">require <span style="color: #2aa198;">'set'</span>

<span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">rand_n</span>(n, max)
  randoms = <span style="color: #b58900;">Set</span>.new
  loop <span style="color: #859900; font-weight: bold;">do</span>
    randoms &lt;&lt; rand(max)
    <span style="color: #859900; font-weight: bold;">return</span> randoms.to_a <span style="color: #859900; font-weight: bold;">if</span> randoms.size &gt;= n
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<p>
好吧&#x2026;原來 Ruby 內建了 Set 的資料型態，第一次發現有內建集合的程式語言，當初應該要想到 Java 中有沒有這東西。 上面是用集合內不重複元素的特性，所以在加入元素時天生就會檢查有沒有重複，最後在轉成陣列。
</p>


<p>
看來以後可以玩玩看交集、聯集、差集之類的，還有子集合判斷之類的。
</p>
</div>
</div>


<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Range Way - 1</h2>
<div class="outline-text-2" id="text-4">
<blockquote>
<p>
A Range represents an interval&#x2014;a set of values with a beginning and
an end.
</p>
</blockquote>

<div class="org-src-container">

<pre class="src src-ruby">range = 0...1000000
how_many = 10000

<span style="color: #586e75;"># </span><span style="color: #586e75;">first way</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">Array::sample Choose a random element or n random elements from the array.</span>
range.to_a.sample(how_many)

<span style="color: #586e75;"># </span><span style="color: #586e75;">second way</span>
(range).sort_by{rand}[0...how_many]
</pre>
</div>

<p>
直接從 Range 裡用內建的方法隨機挑，行數完敗上面那兩個。
</p>
</div>
</div>


<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Range Way - 2</h2>
<div class="outline-text-2" id="text-5">
<p>
突然想到如果要在生成時就篩選掉不想要數字的話，要怎麼做？
</p>

<p>
仔細一想很簡單，直接在在範圍裡改。
</p>

<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #586e75;"># </span><span style="color: #586e75;">Delete 2 from the range of rand</span>
(1..4).reject { |x| x==2 }.to_a.sample(how_many)
</pre>
</div>
</div>
</div>


<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">Benchmark them</h2>
<div class="outline-text-2" id="text-6">
</div><div id="outline-container-sec-6-1" class="outline-3">
<h3 id="sec-6-1">Part 1</h3>
<div class="outline-text-3" id="text-6-1">
<div class="org-src-container">

<pre class="src src-ruby">require <span style="color: #2aa198;">'benchmark'</span>

range = 0...1000000
how_many = 10000

<span style="color: #586e75;">## </span><span style="color: #586e75;">Range way - 1</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  range.to_a.sample(how_many)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 0.076334817</span>

<span style="color: #586e75;">## </span><span style="color: #586e75;">Set Way</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  rand_n(how_many, range)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 0.01060032</span>

<span style="color: #586e75;">## </span><span style="color: #586e75;">Normal way - 1</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  get_uniq_nums(how_many, range)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 3.565261117</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6-2" class="outline-3">
<h3 id="sec-6-2">Part 2</h3>
<div class="outline-text-3" id="text-6-2">
<div class="org-src-container">

<pre class="src src-ruby">range = 0...1000000
how_many = 1000000

<span style="color: #586e75;">## </span><span style="color: #586e75;">Set Way</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  rand_n(how_many, range)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 11.305328646</span>

<span style="color: #586e75;">## </span><span style="color: #586e75;">Range way - 1</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  range.to_a.sample(how_many)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 0.112987391</span>
</pre>
</div>

<p>
Range Way 完敗。 還有沒有實現 Set Way 和 Normal Way 的篩選的功能。
</p>
</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
