<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: emacs | XuBlog]]></title>
  <link href="http://XuHaoJun.github.io/blog/categories/emacs/atom.xml" rel="self"/>
  <link href="http://XuHaoJun.github.io/"/>
  <updated>2014-05-10T00:57:57+08:00</updated>
  <id>http://XuHaoJun.github.io/</id>
  <author>
    <name><![CDATA[XuHaoJun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure/Clojurescript Emacs 開發環境]]></title>
    <link href="http://XuHaoJun.github.io/blog/2014-05-06-writing-clojure-in-emacs.html"/>
    <updated>2014-05-06T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/writing-clojure-in-emacs</id>
    <content type="html"><![CDATA[<p>
簡單的 clojure/clojurescript 開發環境。
</p><p>
<!-- more -->
</p><div class='outline-2' id='outline-container-sec-1'>
<h2 id='sec-1'>基本功能安裝</h2>
<div class='outline-text-2' id='text-1'>
<p>
推薦從 emacs 24 起，自帶的 package 系統來安裝。
</p>

<p>
首先加入更多 package 的安裝來源 <a href='http://melpa.milkbox.net'>melpa</a> <a href='http://marmalade-repo.org/'>marmalade</a>
</p>
<div class='org-src-container'>

<pre class='src src-emacs-lisp'>(<span style='color: #859900; font-weight: bold;'>defvar</span> <span style='color: #268bd2;'>marmalade</span> '(<span style='color: #2aa198;'>"marmalade"</span> . <span style='color: #2aa198;'>"http://marmalade-repo.org/packages/"</span>))
(<span style='color: #859900; font-weight: bold;'>defvar</span> <span style='color: #268bd2;'>gnu</span> '(<span style='color: #2aa198;'>"gnu"</span> . <span style='color: #2aa198;'>"http://elpa.gnu.org/packages/"</span>))
(<span style='color: #859900; font-weight: bold;'>defvar</span> <span style='color: #268bd2;'>melpa</span> '(<span style='color: #2aa198;'>"melpa"</span> . <span style='color: #2aa198;'>"http://melpa.milkbox.net/packages/"</span>))

(add-to-list 'package-archives marmalade)
(add-to-list 'package-archives melpa t)

(package-initialize)
</pre>
</div>

<p>
安裝 clojure-mode：
<code>M-x package-install</code> <code>clojure-mode</code>
</p>

<p>
這樣就有基本的代碼高亮和縮進功能了。
</p>
</div>
</div><div class='outline-2' id='outline-container-sec-2'>
<h2 id='sec-2'>強力插件: CIDER (Clojure IDE and REPL)</h2>
<div class='outline-text-2' id='text-2'>
<p>
<a href='https://github.com/clojure-emacs/cider'>CIDER-github</a>
</p>
</div>
<div class='outline-3' id='outline-container-sec-2-1'>
<h3 id='sec-2-1'>安裝</h3>
<div class='outline-text-3' id='text-2-1'>
<p>
<code>M-x package-install</code> <code>cider</code>
</p>
</div>
</div>

<div class='outline-3' id='outline-container-sec-2-2'>
<h3 id='sec-2-2'>REPL (交互式編程環境)</h3>
<div class='outline-text-3' id='text-2-2'>
<p>
<a href='https://zh.wikipedia.org/wiki/%25E8%25AF%25BB%25E5%258F%2596%25EF%25B9%25A3%25E6%25B1%2582%25E5%2580%25BC%25EF%25B9%25A3%25E8%25BE%2593%25E5%2587%25BA%25E5%25BE%25AA%25E7%258E%25AF'>REPL-wiki</a>
</p>
</div>

<div class='outline-4' id='outline-container-sec-2-2-1'>
<h4 id='sec-2-2-1'>安裝：</h4>
<div class='outline-text-4' id='text-2-2-1'>
<p>
推薦使用<a href='http://leiningen.org/'>leiningen</a> 來管理你的 clojure project.
</p>

<p>
<code>lein new myproject</code>
</p>

<p>
安裝 <a href='https://github.com/clojure-emacs/cider-nrepl'>cider-nrepl</a>
在 <code>~/.lein/profiles.clj</code> 加入以下兩行
</p>
<div class='org-src-container'>

<pre class='src src-clojure'>{<span style='color: #268bd2; font-weight: bold;'>:user</span>
 {<span style='color: #268bd2; font-weight: bold;'>:plugins</span> [[cider/cider-nrepl <span style='color: #2aa198;'>"0.7.0-SNAPSHOT"</span>]]}}
</pre>
</div>
</div>
</div>

<div class='outline-4' id='outline-container-sec-2-2-2'>
<h4 id='sec-2-2-2'>使用：</h4>
<div class='outline-text-4' id='text-2-2-2'>
<p>
接下來在你的 emacs 執行 <code>M-x cider-jack-in</code>
沒有意外的話，會出現一個 repl 的 buffer，關掉是 <code>cider-quit</code> 。
</p>

<p>
幾個必用的 emacs function , 把他們綁在你喜歡的 key 上吧。
<code>cider-eval-last-sexp</code> , <code>cider-eval-defun-at-point</code> ,
<code>cider-switch-to-repl-buffer</code> , <code>cider-jump</code>
</p>
</div>
</div>
</div>

<div class='outline-3' id='outline-container-sec-2-3'>
<h3 id='sec-2-3'>Browser REPL (for clojurescript)</h3>
<div class='outline-text-3' id='text-2-3'>
<p>
<a href='https://github.com/cemerick/austin'>Austin-github</a> <a href='https://github.com/cemerick/austin/tree/master/browser-connected-repl-sample'>專案範例</a>
在 <code>~/.lein/profiles.clj</code> 加入以下兩行
</p>
<div class='org-src-container'>

<pre class='src src-clojure'>{<span style='color: #268bd2; font-weight: bold;'>:user</span>
 {<span style='color: #268bd2; font-weight: bold;'>:plugins</span> [[com.cemerick/austin <span style='color: #2aa198;'>"0.1.4"</span>]]}}
</pre>
</div>

<p>
在你的 cljs 檔案裡的 namespace 新增：
</p>
<div class='org-src-container'>

<pre class='src src-clojure'>(<span style='color: #268bd2; font-weight: bold;'>:require</span> [clojure.browser.repl])
</pre>
</div>

<p>
在 REPL 的環境裡：
</p>
<div class='org-src-container'>

<pre class='src src-clojure'>(<span style='color: #859900; font-weight: bold;'>def</span> <span style='color: #268bd2;'>repl-env</span> (<span style='color: #839496; font-weight: bold;'>reset!</span> cemerick.austin.repls/browser-repl-env
                      (cemerick.austin/repl-env)))
(cemerick.austin.repls/cljs-repl repl-env)
</pre>
</div>

<p>
接下來在新的 REPL 環境裡：
</p>

<div class='org-src-container'>

<pre class='src src-clojure'>(js/alert <span style='color: #2aa198;'>"hello browser"</span>)
</pre>
</div>

<p>
你的 browser 應該會有反應。
</p>
</div>
</div>

<div class='outline-3' id='outline-container-sec-2-4'>
<h3 id='sec-2-4'>自動補全</h3>
<div class='outline-text-3' id='text-2-4'>
<p>
<a href='https://github.com/company-mode/company-mode'>company-mode-github</a>
</p>
</div>

<div class='outline-4' id='outline-container-sec-2-4-1'>
<h4 id='sec-2-4-1'>安裝：</h4>
<div class='outline-text-4' id='text-2-4-1'>
<p>
<code>M-x package-install</code> <code>company</code>
</p>

<p>
開啟：
<code>M-x global-company-mode</code>
</p>

<p>
預設開啟：在你的 init.el 加入這行。
</p>
<div class='org-src-container'>

<pre class='src src-emacs-lisp'>(global-company-mode)
</pre>
</div>
</div>
</div>

<div class='outline-4' id='outline-container-sec-2-4-2'>
<h4 id='sec-2-4-2'>使用：</h4>
<div class='outline-text-4' id='text-2-4-2'>
<p>
必須在你的 repl 開啟的時候才有效！
</p>

<p>
<code>M-n</code>, <code>M-p</code> 上下選擇候選鍵。
</p>


<div class='figure'>
<p><img align='left' alt='company-elisp.png' src='https://company-mode.github.io/images/company-elisp.png' />
</p>
</div>
</div>
</div>
</div>
</div><div class='outline-2' id='outline-container-sec-3'>
<h2 id='sec-3'>其他插件推薦</h2>
<div class='outline-text-2' id='text-3'>
<p>
<a href='https://github.com/jlr/rainbow-delimiters'>rainbow-delimiters</a>
</p>

<p>
<a href='https://gitorious.org/evil/pages/Home'>evil</a>
</p>

<p>
<a href='http://www.emacswiki.org/emacs/InteractivelyDoThings'>ido</a>
</p>
</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby block match and jump (emacs evil-mode)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-10-19-evil-ruby-jump-item.html"/>
    <updated>2013-10-19T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/evil-ruby-jump-item</id>
    <content type="html"><![CDATA[<div class='outline-2' id='outline-container-sec-1'>
<h2 id='sec-1'>Description</h2>
<div class='outline-text-2' id='text-1'>
<p>
Emacs evil-mode <code>%</code> 功能加上 Ruby block 的配對，例如將光標放在 <code>class Foo</code> 上後鍵入 <code>%</code> 可以跳轉至相符的 <code>end</code> 。
</p>

<p>
<!-- more -->
</p>
</div>
</div><div class='outline-2' id='outline-container-sec-2'>
<h2 id='sec-2'>Example</h2>
<div class='outline-text-2' id='text-2'>

<div class='figure'>
<p><img alt='evil-ruby-jump-item.gif' src='./img/evil-ruby-jump-item.gif' />
</p>
</div>
</div>
</div><div class='outline-2' id='outline-container-sec-3'>
<h2 id='sec-3'>Source Code</h2>
<div class='outline-text-2' id='text-3'>
<div class='org-src-container'>

<pre class='src src-emacs-lisp'><span style='color: #586e75;'>;; </span><span style='color: #586e75;'>Require package: (evil)</span>
(<span style='color: #859900; font-weight: bold;'>evil-define-motion</span> <span style='color: #268bd2;'>evil-ruby-jump-item</span> (count)
  <span style='color: #839496; font-weight: bold;'>:jump</span> t
  <span style='color: #839496; font-weight: bold;'>:type</span> inclusive
  (<span style='color: #859900; font-weight: bold;'>cond</span> ((string-match ruby-block-beg-re (current-word))
         (ruby-end-of-block count))
        ((string-match ruby-block-end-re (current-word))
         (ruby-beginning-of-block count))
        (t
         (evil-jump-item count))))

(add-hook 'ruby-mode-hook
          (<span style='color: #859900; font-weight: bold;'>lambda</span> ()
            (define-key evil-normal-state-local-map <span style='color: #2aa198;'>"%"</span> 'evil-ruby-jump-item)
            (define-key evil-motion-state-local-map <span style='color: #2aa198;'>"%"</span> 'evil-ruby-jump-item)))
</pre>
</div>
</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs 自動縮進 Ruby's if-else]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-29-emacs-ruby-if-else-intdent.html"/>
    <updated>2013-08-29T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/emacs-ruby-if-else-intdent</id>
    <content type="html"><![CDATA[<div class='outline-2' id='outline-container-sec-1'>
<h2 id='sec-1'>Problem</h2>
<div class='outline-text-2' id='text-1'>
<p>
當我打完 elsif 時，他應該要縮進到 if 那邊。
</p>
<div class='org-src-container'>

<pre class='src src-ruby'><span style='color: #859900; font-weight: bold;'>if</span>
   <span style='color: #859900; font-weight: bold;'>elsif</span> <span style='color: #586e75;'># </span><span style='color: #586e75;'>Should indent this line</span>
<span style='color: #859900; font-weight: bold;'>end</span>
</pre>
</div>

<p>
<!-- more -->
</p>

<p>
正確的 if-else 縮進：
</p>
<div class='org-src-container'>

<pre class='src src-ruby'><span style='color: #859900; font-weight: bold;'>if</span> 1&gt;2
  ....
<span style='color: #859900; font-weight: bold;'>elsif</span>
  ...
<span style='color: #859900; font-weight: bold;'>else</span>
  ...
<span style='color: #859900; font-weight: bold;'>end</span>
</pre>
</div>

<p>
很明顯 else 和 elsif 是向 if 對齊縮進的。
</p>
</div>
</div><div class='outline-2' id='outline-container-sec-2'>
<h2 id='sec-2'>Solution</h2>
<div class='outline-text-2' id='text-2'>
<p>
發現在 Emacs 上沒有自動縮進 Ruby 的 if-else 語法後，去試了一下 vim 發現可以處理 if-else
的縮進，當然得跟上！
</p>

<p>
最簡單的方法就是在按 <code>space</code> 時，檢查前一個 word 是不是 <code>else</code> 或 <code>elsif</code> 。
</p>

<p>
首先我有用 ruby-electric，這東西會在你打 <code>if</code> 或 <code>class</code> 等等 自動產生一個 <code>end</code>
在下行，他是依據你打 <code>if&lt;space&gt;</code> 的 <code>&lt;space&gt;</code> 時會觸發產生一個 <code>end</code> 。
</p>

<p>
<code>&lt;space&gt;</code> 對應到 ruby-electric-space 這個 funciton，我從 ruby-electric 裡複製過來，很像不應該這樣做，不過不管了。
</p>

<p>
以下是修改過後的版本：
</p>
<div class='org-src-container'>

<pre class='src src-emacs-lisp'>(<span style='color: #859900; font-weight: bold;'>defun</span> <span style='color: #268bd2;'>ruby-electric-space</span> (arg)
  (interactive <span style='color: #2aa198;'>"P"</span>)
  (self-insert-command (prefix-numeric-value arg))
  (<span style='color: #859900; font-weight: bold;'>cond</span> ((ruby-electric-space-can-be-expanded-p)
         (<span style='color: #859900; font-weight: bold;'>save-excursion</span>
           (ruby-indent-line t)
           (newline)
           (ruby-electric-insert-end)))
        ((ruby-electric-space-can-be-indent-p) (ruby-indent-line t))))

(<span style='color: #859900; font-weight: bold;'>defun</span> <span style='color: #268bd2;'>ruby-electric-space-can-be-indent-p</span> ()
  (and (ruby-electric-code-at-point-p)
       (ruby-electric-matching-word-p)))

(<span style='color: #859900; font-weight: bold;'>defun</span> <span style='color: #268bd2;'>ruby-electric-matching-word-p</span> ()
  (<span style='color: #859900; font-weight: bold;'>save-excursion</span>
    (backward-word)
    (string-match <span style='color: #2aa198;'>"</span><span style='color: #859900; font-weight: bold;'>\\</span><span style='color: #b58900; font-weight: bold;'>(</span><span style='color: #2aa198;'>\\&lt;else\\&gt;</span><span style='color: #859900; font-weight: bold;'>\\</span><span style='color: #b58900; font-weight: bold;'>|</span><span style='color: #2aa198;'>\\&lt;elsif\\&gt;</span><span style='color: #859900; font-weight: bold;'>\\</span><span style='color: #b58900; font-weight: bold;'>)</span><span style='color: #2aa198;'>"</span> (current-word))))
</pre>
</div>
</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Org-mode + Octopress + Github 來搭建 Blog]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-23-emacs-org-octopress.html"/>
    <updated>2013-08-23T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/emacs-org-octopress</id>
    <content type="html"><![CDATA[<ul class='org-ul'>
<li>優點
<ul class='org-ul'>
<li>免費網域、免費託管、免費流量
</li>
<li>版本管理，不用擔心備份！
</li>
<li>Org-mode or Markdown 撰寫效率好
</li>
</ul>
</li>
<li>缺點
<ul class='org-ul'>
<li>技術門檻要求較高 <br />
    需要懂一些 Git, Github, Org-mode 或 Makrdown，更進階要客製化 Blog 的話，可能還要懂些許 Ruby (jekyll)
</li>
<li>Org-mode 的 code block 沒有 markdown's code block 的 title url 功能。
</li>
</ul>
</li>
</ul><p>
<!-- more -->
</p><hr /><div class='outline-2' id='outline-container-sec-1'>
<h2 id='sec-1'>Org-mode</h2>
<div class='outline-text-2' id='text-1'>
<blockquote>
<p>
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system. <br />
<b><a href='http://orgmode.org/'>http://orgmode.org/</a></b>
</p>
</blockquote>
<p>
Org-mode 是建立於 Emacs(編輯器) 之上的插件，是一種輕量級的標記語言可以用來做時間管理、筆記、生成 Html &#x2026; ，同類型的流行的還有 Markdown，這篇文章基本上就是
Emacs + org-mode 寫的，之後在透過插件 <a href='https://github.com/yoshinari-nomura/org-octopress'>org-octopress</a> 生成給 Octopress 用。
</p>
</div>


<div class='outline-3' id='outline-container-sec-1-1'>
<h3 id='sec-1-1'>Install Emacs(24.x)</h3>
<div class='outline-text-3' id='text-1-1'>
<p>
我只會在 Linux 平台上用 Package 裝。
</p>

<p>
一些流行的 Linux distribution 的 Package Manager 安裝方法。
</p>
<div class='org-src-container'>

<pre class='src src-sh'>pacman -S emacs          <span style='color: #586e75;'># </span><span style='color: #586e75;'>Archlinux</span>
apt-get install emacs    <span style='color: #586e75;'># </span><span style='color: #586e75;'>Ubuntu</span>
yum install emacs        <span style='color: #586e75;'># </span><span style='color: #586e75;'>Fedora</span>
</pre>
</div>
</div>
</div>
<div class='outline-3' id='outline-container-sec-1-2'>
<h3 id='sec-1-2'>Install org and org-octopress</h3>
<div class='outline-text-3' id='text-1-2'>
<p>
用 Emacs 裡的 Package Manager 安裝：
</p>
<div class='org-src-container'>

<pre class='src src-sh'><span style='color: #586e75;'># </span><span style='color: #586e75;'>&#22312;&#23478;&#30446;&#37636;&#24314;&#19968;&#20491; .emacs.d &#36039;&#26009;&#22846;&#24460;&#65292;&#22312;&#35041;&#38754;&#24314; init.el</span>
mkdir ~/.emacs.d
touch ~/.emacs.d/init.el
</pre>
</div>

<p>
在 init.el 添加：
</p>
<div class='org-src-container'>

<pre class='src src-emacs-lisp'>(add-to-list 'package-archives
  '(<span style='color: #2aa198;'>"marmalade"</span> . <span style='color: #2aa198;'>"http://marmalade-repo.org/packages/"</span>))

(add-to-list 'package-archives
  '(<span style='color: #2aa198;'>"melpa"</span> . <span style='color: #2aa198;'>"http://melpa.milkbox.net/packages/"</span>) t)

(package-initialize)
</pre>
</div>

<p>
開啟 Emacs 鍵入 <code>M-x package-install org RET</code> ，把 org 換成 org-octopress 後安裝。
</p>
</div>
</div>
<div class='outline-3' id='outline-container-sec-1-3'>
<h3 id='sec-1-3'>Org-octopress Setup</h3>
<div class='outline-text-3' id='text-1-3'>
<p>
以下是從 <a href='https://github.com/yoshinari-nomura/org-octopress'>org-octopress</a> 的 README 裡擷取 Basic Settings 的片段。
</p>

<p>
添加在 init.el。
</p>
<ul class='org-ul'>
<li>Emacs Settings:
</li>
</ul>
<div class='org-src-container'>

<pre class='src src-emacs-lisp'>(<span style='color: #859900; font-weight: bold;'>require</span> '<span style='color: #268bd2; font-weight: bold;'>org-octopress</span>)
(setq org-octopress-directory-top       <span style='color: #2aa198;'>"~/octopress/source"</span>)
(setq org-octopress-directory-posts     <span style='color: #2aa198;'>"~/octopress/source/_posts"</span>)
(setq org-octopress-directory-org-top   <span style='color: #2aa198;'>"~/octopress/source"</span>)
(setq org-octopress-directory-org-posts <span style='color: #2aa198;'>"~/octopress/source/blog"</span>)
(setq org-octopress-setup-file          <span style='color: #2aa198;'>"~/org-sty/setupfile.org"</span>)
</pre>
</div>

<ul class='org-ul'>
<li>Octopress Settings:
</li>
</ul>
<p>
In octopress/_config.yml, you must set the permelink attribute: <br />
<code>permalink: /blog/:year-:month-:day-:title.html</code>
</p>
</div>
</div>
</div><div class='outline-2' id='outline-container-sec-2'>
<h2 id='sec-2'>Octopress</h2>
<div class='outline-text-2' id='text-2'>
<p>
<a href='http://octopress.org/'>Octopress</a> 是一套 Blog 的框架，所以一開始你的 Blog 就有一個簡潔的外觀，功能上有支援 Twitter, Facebook, Delicious 等等，也可以用來產生靜態 Blog 後放在 Github
上，預設是用 Markdown 來撰寫文章。
</p>
</div>

<div class='outline-3' id='outline-container-sec-2-1'>
<h3 id='sec-2-1'>Install and Use Octopress</h3>
<div class='outline-text-3' id='text-2-1'>
<p>
要先安裝 <a href='http://www.ruby-lang.org/en/'>Ruby</a> 和 <a href='http://gitscm.com/'>Git</a>。 <br />
官方的方法： <a href='http://octopress.org/docs/setup/'>Octopress Setup</a>
</p>
</div>
</div>
</div><div class='outline-2' id='outline-container-sec-3'>
<h2 id='sec-3'>Github</h2>
<div class='outline-text-2' id='text-3'>
<p>
首先有個 <a href='https://github.com/'>Github</a> 的帳號後，建立一個 Repository 為 username.github.io，之後去你的 octopress 的根目錄鍵入 <code>bundle exec rake setup_github_page</code> 輸入剛剛建完給你的 url。
</p>

<p>
官方文檔: <a href='https://help.github.com/'>GithubHelp</a>
</p>
</div>
</div><div class='outline-2' id='outline-container-sec-4'>
<h2 id='sec-4'>基本流程</h2>
<div class='outline-text-2' id='text-4'>
<ol class='org-ol'>
<li>開啟 Emacs 鍵入 <code>M-x org-octopress RET</code> ，會到 org-octopress 的界面鍵入 <code>w</code>
和標題，開始撰寫文章。
</li>
<li>寫完後，鍵入 <code>C-c C-e P x octopress</code> 來生成靜態網頁
</li>
<li>在你的 octopress 根目錄鍵入 <code>bundle exec rake gen_deploy</code>
</li>
<li>也可以把 source branch 下 push 上去做版本管理 <code>git push -u origin source</code>
</li>
</ol>

<p>
文章打到一半或要做確認的時候用(需先生成靜態網頁) <code>bundle exec rake preview</code> ，之後在
<a href='http://localhost:4000/'>http://localhost:4000/</a> 可以看你的 Blog。
</p>
</div>
</div>]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解決 Org-mode(8.x) 轉 Html 中文換行變空格問題]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-19-han-extra-space-org-mode.html"/>
    <updated>2013-08-19T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/han-extra-space-org-mode</id>
    <content type="html"><![CDATA[<p>
基本上是照這兩篇提供的解法去依樣畫葫蘆出來的 org-mode 版本。
</p><ul class='org-ul'>
<li><a href='http://stackoverflow.com/questions/8550112/prevent-browser-converting-n-between-lines-into-space-for-chinese-characters/8551033#8551033'>Prevent browser converting '\n' between lines into space (for Chinese characters)</a>
</li>
<li><a href='http://chenyufei.info/blog/2011-12-23/fix-chinese-newline-becomes-space-in-browser-problem/'>解决 Markdown 转 HTML 中文换行变空格的问题</a>
</li>
</ul><p>
<!-- more -->
</p><p>
大致上的解法是將 html 檔案裡，將中文字後有接個換行符的把他合併為一行。 <br />
感覺上是個 workaround 的方法，如果在餵給 rss 似乎又會有問題，不過我無法忍受那些多餘的空格。
</p><p>
代碼如下：
</p><div class='org-src-container'>

<pre class='src src-emacs-lisp'>(<span style='color: #859900; font-weight: bold;'>defun</span> <span style='color: #268bd2;'>han/org-html-delete-extra-space</span> (string backend info)
  <span style='color: #2aa198;'>"Let chinese word to a line if match /han\newline/"</span>
  (<span style='color: #859900; font-weight: bold;'>when</span> (and (org-export-derived-backend-p backend 'html)
             (string-match <span style='color: #2aa198;'>"\\cc\n"</span> string))
    (replace-regexp-in-string <span style='color: #2aa198;'>"</span><span style='color: #859900; font-weight: bold;'>\\</span><span style='color: #b58900; font-weight: bold;'>(</span><span style='color: #2aa198;'>\\cc</span><span style='color: #859900; font-weight: bold;'>\\</span><span style='color: #b58900; font-weight: bold;'>)</span><span style='color: #2aa198;'>\n</span><span style='color: #859900; font-weight: bold;'>\\</span><span style='color: #b58900; font-weight: bold;'>(</span><span style='color: #2aa198;'>\\cc</span><span style='color: #859900; font-weight: bold;'>\\</span><span style='color: #b58900; font-weight: bold;'>)</span><span style='color: #2aa198;'>"</span> <span style='color: #2aa198;'>"\\1\\2"</span> string)))

(<span style='color: #859900; font-weight: bold;'>eval-after-load</span> 'ox-html
  '(add-to-list 'org-export-filter-final-output-functions
                'han/org-html-delete-extra-space))
</pre>
</div><p>
順便吐槽一下 emacs 裡的 regex，實在太多 <code>\</code> 了 <br />
這是上面連結文中 Ruby 的 Regex 樣式：
</p><div class='org-src-container'>

<pre class='src src-ruby'><span style='color: #586e75;'># </span><span style='color: #586e75;'>\p{Han} &#26159;&#28450;&#23383;</span>
gsub(<span style='color: #2aa198;'>/(\p{Han})\n(\p{Han})/</span>m, <span style='color: #2aa198;'>'\1\2'</span>)
</pre>
</div><p>
這是 Emacs-lisp 的：
</p><div class='org-src-container'>

<pre class='src src-emacs-lisp'><span style='color: #586e75;'>;; </span><span style='color: #586e75;'>\\cc &#26159;&#28450;&#23383;</span>
(replace-regexp-in-string <span style='color: #2aa198;'>"</span><span style='color: #859900; font-weight: bold;'>\\</span><span style='color: #b58900; font-weight: bold;'>(</span><span style='color: #2aa198;'>\\cc</span><span style='color: #859900; font-weight: bold;'>\\</span><span style='color: #b58900; font-weight: bold;'>)</span><span style='color: #2aa198;'>\n</span><span style='color: #859900; font-weight: bold;'>\\</span><span style='color: #b58900; font-weight: bold;'>(</span><span style='color: #2aa198;'>\\cc</span><span style='color: #859900; font-weight: bold;'>\\</span><span style='color: #b58900; font-weight: bold;'>)</span><span style='color: #2aa198;'>"</span> <span style='color: #2aa198;'>"\\1\\2"</span> string)
</pre>
</div>]]></content>
  </entry>
  
</feed>
