<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[(xu-hao-jun)]]></title>
  <link href="http://XuHaoJun.github.io/atom.xml" rel="self"/>
  <link href="http://XuHaoJun.github.io/"/>
  <updated>2014-05-16T17:57:56+08:00</updated>
  <id>http://XuHaoJun.github.io/</id>
  <author>
    <name><![CDATA[XuHaoJun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的 Linux 桌面]]></title>
    <link href="http://XuHaoJun.github.io/blog/2014-05-16-my-linux-desktop.html"/>
    <updated>2014-05-16T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/my-linux-desktop</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Linux Distribution</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="https://www.archlinux.org/">Arch Linux</a> 是我現在用的最順手的發行版，剛入門的時候是用 <a href="http://www.ubuntu-tw.org/">Ubuntu</a> ，各種卡當不說，升級還要重裝系統，真坑爹阿！而且預設裝了太多我根本用不到的軟件，初學不久後，就判逃去 Arch 陣營了，因為他是一個很純淨、簡單且更新快的發行版，還記得剛裝完 Arch 後記憶體居然佔不到 100MB 且運行快速，這對電腦配置不好的人來說根本超開心！還有 <a href="https://wiki.archlinux.org/">Arch
WiKi</a> 這個查文檔的好東西。
</p>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Desktop Enviroment</h2>
<div class="outline-text-2" id="text-2">
<p>
經歷了幾番波折後，最後比較穩定使用 <a href="https://github.com/c00kiemon5ter/monsterwm">monsterwm</a> ，好吧，嚴格來說它只是個 Window
Manager 只是桌面環境中的一個子功能罷了，特色就是 dynamic tiling window 和只用按鍵來操控視窗，不過這幾乎沒啥用到，最多使用就是快速切一邊瀏覽器一邊編輯器如下圖：
</p>
<pre class="example">
-------------
|           |
|  Firefox  |
|-----------|
|  Emacs    |
|           |
-------------
</pre>
<p>
還有一個優點就是它啟動後記憶體只佔 1MB。
</p>

<ul class="org-ul">
<li>實際截圖：
</li>
</ul>

<div class="figure">
<p><img src="./img/my-monsterwm.png" alt="my-monsterwm.png" />
</p>
</div>

<p>
是不是很簡潔阿！沒有一絲多餘的東西。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Browser</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="http://moztw.org/firefox/">Firefox</a> 是我主要使用的瀏覽器，唯一讓我重度使用的原因：<a href="http://5digits.org/pentadactyl/">Pentadactyl</a>， 簡單來說就是以鍵盤為主來瀏覽網頁！
</p>

<p>
直接上我使用 Pendatactyl 的影片： <a href="http://youtu.be/BuANeWJR-lM">Pentadactyl Show</a>
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Editor</h2>
<div class="outline-text-2" id="text-4">
<p>
主力編輯器： <a href="https://www.gnu.org/software/emacs/">Emacs</a> ，現在這篇文章就是在 Emacs 下撰寫的和使用他的 <a href="http://orgmode.org/">Org-mode</a> ，也是我 Programming 使用的編輯器。
</p>

<ul class="org-ul">
<li>實際截圖：
<img src="./img/my-emacs.png" alt="my-emacs.png" />
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">File Manager</h2>
<div class="outline-text-2" id="text-5">
<p>
<a href="http://docs.xfce.org/xfce/thunar/start">Thunar</a> ，只在要整理一些圖片檔的時候才會用到它，其餘的時間都是 shell 下管理的。
</p>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">Media Player</h2>
<div class="outline-text-2" id="text-6">
<p>
使用的是 <a href="http://smplayer.sourceforge.net/">SMPlayer</a> ，這已經滿足我的需求了！
</p>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">PDF Viewer</h2>
<div class="outline-text-2" id="text-7">
<p>
<a href="http://pwmt.org/projects/zathura">zathura</a> 是我常用來閱讀電子書的軟體，有像 Vi-like 的快捷鍵，簡單的 <code>j</code> <code>k</code> 和
<code>space</code> <code>shift-space</code> <code>/</code> 對我而言就很夠用了。
</p>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">Revision Control</h2>
<div class="outline-text-2" id="text-8">
<p>
<a href="https://git-cola.github.io/">git-cola</a> 是 git 圖形化界面的軟體，我只在觀察別人的 Repo 的 Log 才會使用。
</p>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9">Terminal Emulator</h2>
<div class="outline-text-2" id="text-9">
<p>
<a href="http://pod.tst.eu/http://cvs.schmorp.de/rxvt-unicode/doc/rxvt.1.pod">rxvt-unicode</a> 是我主要使用的虛擬終端，看中它有 C-S 架構，開多個比較省資源，稍微配一下顏色，就夠用了。
</p>
</div>
</div>

<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10">Office Suite</h2>
<div class="outline-text-2" id="text-10">
<p>
<a href="https://zh-tw.libreoffice.org/">LibreOffice</a> 用來開 .ppt .doc 的玩意兒，基本上我自己不用它，目前學著用 Latex 或
Org-mode 來取代文檔撰寫和投影片製作。
</p>
</div>
</div>

<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11">Summary</h2>
<div class="outline-text-2" id="text-11">
<p>
絕大部分使用 Linux 時間都在 <code>monsterwm</code> <code>Firefox</code> <code>Emacs</code> <code>Urxvt</code> <code>zathura</code> 下度過，無非就是讀著電子書和放狗和 Stack Overflow 來查查資料，之後就是 Emacs 編程和在 Terminal
裡使用 CLI 的工具，總是搞不懂為啥有人老是說 Linux 的桌面體驗很差？應該還沒到很差的地步吧&#x2026;&#x2026;雖然遊戲很少就是了。
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 遠程文件編輯]]></title>
    <link href="http://XuHaoJun.github.io/blog/2014-05-15-linux-remote-file-edit.html"/>
    <updated>2014-05-15T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/linux-remote-file-edit</id>
    <content type="html"><![CDATA[<p>
大部分都是 ssh 連線過去使用那邊的環境來修改檔案，如果遠程環境沒有稱手的編輯器可是一件很惱人的一件事，所以找了一些方法在本地編輯文件。
</p>

<p>
<!-- more -->
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">SSH Filesystem</h2>
<div class="outline-text-2" id="text-1">
<p>
<a href="http://fuse.sourceforge.net/sshfs.html">sshfs</a> 是將遠程的文件系統掛載在本地，之後就可以在本地編輯了，也會同步更新上去。
</p>
</div>
<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">Example:</h3>
<div class="outline-text-3" id="text-1-1">
<p>
下面的命令會將遠程的家目錄掛載在你本地的 <code>~/dir</code> 。
</p>
<div class="org-src-container">

<pre class="src src-sh">sshfs user@yourdomain:/home/user ~/dir
</pre>
</div>
<p>
之後就可以隨心所欲的編輯 <code>~/dir</code> 之下的東西了，當然不侷限於來編輯，像是 gimp、
mplayer 什麼的都可以！
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Emacs TRAMP</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="https://www.gnu.org/software/tramp/">TRAMP</a> 是在 Emacs 之下來遠程編輯文件的東西。
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Example:</h3>
<div class="outline-text-3" id="text-2-1">
<p>
在 Emacs 之下 <code>M-x find-file</code> 後輸入 <code>/ssh:user@yourdomain</code> 然後 Enter 鍵，就會看到你的家目錄會以 <code>dired-mode</code> 的形式開啟，之後選擇你的檔案來編輯！
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">總結</h2>
<div class="outline-text-2" id="text-3">
<p>
如果本地環境允許的話就安裝 <code>sshfs</code> 吧！這樣方便許多 <code>Emacs TRAMP</code> 只能用來編輯文件，而 <code>sshfs</code> 則不只用來編輯文件，用來看遠程的 pdf 或影音檔或 copy 檔案都很方便！
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[黑白棋 (Clojurescript)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2014-05-11-clojurescript-reversi-game.html"/>
    <updated>2014-05-11T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/clojurescript-reversi-game</id>
    <content type="html"><![CDATA[<p>
一個簡單的單機網頁(html5)黑白棋遊戲。
</p>

<p>
<a href="https://xuhaojun.github.io/reversi/">Try it Online</a>
</p>

<p>
<a href="https://github.com/XuHaoJun/reversi">Source code</a>
</p>

<p>
<!-- more -->
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">實現算法</h2>
<div class="outline-text-2" id="text-1">
<p>
每次下棋對其八個鄰近方格做掃描，如果是相反顏色的棋子，就往其方位向前找到另一個相同顏色的棋子，若有找到則翻棋，沒有則遍歷下一個方位。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">電腦(AI)下棋算法</h2>
<div class="outline-text-2" id="text-2">
<p>
暫時隨機，在看用哪種好。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Clojurescript 使用心得</h2>
<div class="outline-text-2" id="text-3">
<p>
一堆括號阿！！每次都要讓函數回傳有意義的值，Debug 起來也很容易，一個函數影響的範圍就只有他的參數而已，沒有隱示參數(全域變數、成員變數)的話就很好測試，每個函數就盡量小小的做一件事，不過到使用 <a href="https://github.com/photonstorm/phaser">phaser</a> (javascript html5 game framework)那層就一堆副作用囉!(set! xxx yyy)。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">截圖</h2>
<div class="outline-text-2" id="text-4">

<div class="figure">
<p><img src="./img/reversi-game.png" alt="reversi-game.png" />
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure 遞迴測試]]></title>
    <link href="http://XuHaoJun.github.io/blog/2014-05-10-clojure-recursion.html"/>
    <updated>2014-05-10T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/clojure-recursion</id>
    <content type="html"><![CDATA[<p>
<a href="http://clojure.org/functional_programming#Functional%2520Programming--Recursive%2520Looping">Clojure Recursive Looping</a>
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">傳統遞迴</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">Source</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #859900; font-weight: bold;">defn</span> <span style="color: #268bd2;">deepable-recur?</span> [deep-length]
  (<span style="color: #859900; font-weight: bold;">if</span> (<span style="color: #839496; font-weight: bold;">=</span> 0 deep-length)
    true
    (deepable-recur? (<span style="color: #839496; font-weight: bold;">dec</span> deep-length))))
</pre>
</div>

<p>
<!-- more -->
</p>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">Test</h3>
<div class="outline-text-3" id="text-1-2">
<ul class="org-ul">
<li>一個很蠢的測試函式：
</li>
</ul>
<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #859900; font-weight: bold;">defn</span> <span style="color: #268bd2;">deep-test</span> [start end step deep-fn]
  (<span style="color: #859900; font-weight: bold;">doseq</span> [length (<span style="color: #839496; font-weight: bold;">range</span> start end step)]
    (<span style="color: #859900; font-weight: bold;">if</span> (deep-fn length)
      (<span style="color: #839496; font-weight: bold;">println</span> length <span style="color: #2aa198;">"Deep Done!"</span>))))
(deep-test 5000 10000 1000 deepable-recur?)
<span style="color: #586e75;">;;; </span><span style="color: #586e75;">output-&gt;</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">5000 Deep Done!</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">6000 Deep Done!</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">7000 Deep Done!</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">8000 Deep Done!</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">StackOverflowError   clojure.lang.Numbers$LongOps.combine (Numbers.java:394)</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Clojure recur special operator</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Source</h3>
<div class="outline-text-3" id="text-2-1">
<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #859900; font-weight: bold;">defn</span> <span style="color: #268bd2;">deepable-recur?</span> [deep-length]
  (<span style="color: #859900; font-weight: bold;">loop</span> [len deep-length]
    (<span style="color: #859900; font-weight: bold;">if</span> (<span style="color: #839496; font-weight: bold;">=</span> 0 len)
      true
      (<span style="color: #859900; font-weight: bold;">recur</span> (<span style="color: #839496; font-weight: bold;">dec</span> len)))))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">Test</h3>
<div class="outline-text-3" id="text-2-2">
<div class="org-src-container">

<pre class="src src-clojure">(deep-test 60000000 80000000 2000000 deepable-recur?)
<span style="color: #586e75;">;;; </span><span style="color: #586e75;">output-&gt;</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">60000000 Deep Done!</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">62000000 Deep Done!</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">64000000 Deep Done!</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">66000000 Deep Done!</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">68000000 Deep Done!</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">70000000 Deep Done!</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">72000000 Deep Done!</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">74000000 Deep Done!</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">76000000 Deep Done!</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">78000000 Deep Done!</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">nil</span>
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Clojure trampoline</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">Source</h3>
<div class="outline-text-3" id="text-3-1">
<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #859900; font-weight: bold;">defn</span> <span style="color: #268bd2;">deepable-recur?</span> [deep-length]
  (<span style="color: #859900; font-weight: bold;">if</span> (<span style="color: #839496; font-weight: bold;">=</span> 0 deep-length)
    true
    #(deepable-recur? (<span style="color: #839496; font-weight: bold;">dec</span> deep-length))))
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">Test</h3>
<div class="outline-text-3" id="text-3-2">
<p>
比上面那個慢多了。
</p>
<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #839496; font-weight: bold;">trampoline</span> deepable-recur? 70000000)
<span style="color: #586e75;">;;; </span><span style="color: #586e75;">output-&gt;</span>
<span style="color: #586e75;">;; </span><span style="color: #586e75;">true</span>
</pre>
</div>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure/Clojurescript Emacs 開發環境]]></title>
    <link href="http://XuHaoJun.github.io/blog/2014-05-06-writing-clojure-in-emacs.html"/>
    <updated>2014-05-06T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/writing-clojure-in-emacs</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">基本功能安裝</a></li>
<li><a href="#sec-2">強力插件: CIDER (Clojure IDE and REPL)</a>
<ul>
<li><a href="#sec-2-1">安裝</a></li>
<li><a href="#sec-2-2">REPL (交互式編程環境)</a></li>
<li><a href="#sec-2-3">Browser REPL (for clojurescript)</a></li>
<li><a href="#sec-2-4">自動補全</a></li>
</ul>
</li>
<li><a href="#sec-3">其他插件推薦</a></li>
<li><a href="#sec-4">截圖</a></li>
</ul>
</div>
</div>
<p>
簡單的 clojure/clojurescript 開發環境。
</p>

<p>
<!-- more -->
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">基本功能安裝</h2>
<div class="outline-text-2" id="text-1">
<p>
推薦從 emacs 24 起，自帶的 package 系統來安裝。
</p>

<p>
首先加入更多 package 的安裝來源 <a href="http://melpa.milkbox.net">melpa</a> <a href="http://marmalade-repo.org/">marmalade</a>
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defvar</span> <span style="color: #268bd2;">marmalade</span> '(<span style="color: #2aa198;">"marmalade"</span> . <span style="color: #2aa198;">"http://marmalade-repo.org/packages/"</span>))
(<span style="color: #859900; font-weight: bold;">defvar</span> <span style="color: #268bd2;">gnu</span> '(<span style="color: #2aa198;">"gnu"</span> . <span style="color: #2aa198;">"http://elpa.gnu.org/packages/"</span>))
(<span style="color: #859900; font-weight: bold;">defvar</span> <span style="color: #268bd2;">melpa</span> '(<span style="color: #2aa198;">"melpa"</span> . <span style="color: #2aa198;">"http://melpa.milkbox.net/packages/"</span>))

(add-to-list 'package-archives marmalade)
(add-to-list 'package-archives melpa t)

(package-initialize)
</pre>
</div>

<p>
安裝 clojure-mode：
<code>M-x package-install</code> <code>clojure-mode</code>
</p>

<p>
這樣就有基本的代碼高亮和縮進功能了。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">強力插件: CIDER (Clojure IDE and REPL)</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="https://github.com/clojure-emacs/cider">CIDER-github</a>
</p>
</div>
<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">安裝</h3>
<div class="outline-text-3" id="text-2-1">
<p>
<code>M-x package-install</code> <code>cider</code>
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">REPL (交互式編程環境)</h3>
<div class="outline-text-3" id="text-2-2">
<p>
<a href="https://zh.wikipedia.org/wiki/%25E8%25AF%25BB%25E5%258F%2596%25EF%25B9%25A3%25E6%25B1%2582%25E5%2580%25BC%25EF%25B9%25A3%25E8%25BE%2593%25E5%2587%25BA%25E5%25BE%25AA%25E7%258E%25AF">REPL-wiki</a>
</p>
</div>

<div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1">安裝：</h4>
<div class="outline-text-4" id="text-2-2-1">
<p>
推薦使用<a href="http://leiningen.org/">leiningen</a> 來管理你的 clojure project.
</p>

<p>
<code>lein new myproject</code>
</p>

<p>
安裝 <a href="https://github.com/clojure-emacs/cider-nrepl">cider-nrepl</a>
在 <code>~/.lein/profiles.clj</code> 加入以下兩行
</p>
<div class="org-src-container">

<pre class="src src-clojure">{<span style="color: #268bd2; font-weight: bold;">:user</span>
 {<span style="color: #268bd2; font-weight: bold;">:plugins</span> [[cider/cider-nrepl <span style="color: #2aa198;">"0.7.0-SNAPSHOT"</span>]]}}
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-2-2" class="outline-4">
<h4 id="sec-2-2-2">使用：</h4>
<div class="outline-text-4" id="text-2-2-2">
<p>
接下來在你的 emacs 執行 <code>M-x cider-jack-in</code>
沒有意外的話，會出現一個 repl 的 buffer，關掉是 <code>cider-quit</code> 。
</p>

<p>
幾個必用的 emacs function , 把他們綁在你喜歡的 key 上吧。
<code>cider-eval-last-sexp</code> , <code>cider-eval-defun-at-point</code> ,
<code>cider-switch-to-repl-buffer</code> , <code>cider-jump</code>
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">Browser REPL (for clojurescript)</h3>
<div class="outline-text-3" id="text-2-3">
<p>
<a href="https://github.com/cemerick/austin">Austin-github</a> <a href="https://github.com/cemerick/austin/tree/master/browser-connected-repl-sample">專案範例</a>
在 <code>~/.lein/profiles.clj</code> 加入以下兩行
</p>
<div class="org-src-container">

<pre class="src src-clojure">{<span style="color: #268bd2; font-weight: bold;">:user</span>
 {<span style="color: #268bd2; font-weight: bold;">:plugins</span> [[com.cemerick/austin <span style="color: #2aa198;">"0.1.4"</span>]]}}
</pre>
</div>

<p>
在你的 cljs 檔案裡的 namespace 新增：
</p>
<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #268bd2; font-weight: bold;">:require</span> [clojure.browser.repl])
</pre>
</div>

<p>
在 REPL 的環境裡：
</p>
<div class="org-src-container">

<pre class="src src-clojure">(<span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">repl-env</span> (<span style="color: #839496; font-weight: bold;">reset!</span> cemerick.austin.repls/browser-repl-env
                      (cemerick.austin/repl-env)))
(cemerick.austin.repls/cljs-repl repl-env)
</pre>
</div>

<p>
接下來在新的 REPL 環境裡：
</p>

<div class="org-src-container">

<pre class="src src-clojure">(js/alert <span style="color: #2aa198;">"hello browser"</span>)
</pre>
</div>

<p>
你的 browser 應該會有反應。
</p>
</div>
</div>

<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4">自動補全</h3>
<div class="outline-text-3" id="text-2-4">
<p>
<a href="https://github.com/company-mode/company-mode">company-mode-github</a>
</p>
</div>

<div id="outline-container-sec-2-4-1" class="outline-4">
<h4 id="sec-2-4-1">安裝：</h4>
<div class="outline-text-4" id="text-2-4-1">
<p>
<code>M-x package-install</code> <code>company</code>
</p>

<p>
開啟：
<code>M-x global-company-mode</code>
</p>

<p>
預設開啟：在你的 init.el 加入這行。
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(global-company-mode)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-2-4-2" class="outline-4">
<h4 id="sec-2-4-2">使用：</h4>
<div class="outline-text-4" id="text-2-4-2">
<p>
必須在你的 repl 開啟的時候才有效！
</p>

<p>
<code>M-n</code>, <code>M-p</code> 上下選擇候選鍵。
</p>


<div class="figure">
<p><img src="https://company-mode.github.io/images/company-elisp.png" alt="company-elisp.png" />
</p>
</div>
</div>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">其他插件推薦</h2>
<div class="outline-text-2" id="text-3">
<p>
<a href="https://github.com/jlr/rainbow-delimiters">rainbow-delimiters</a>
</p>

<p>
<a href="https://gitorious.org/evil/pages/Home">evil</a>
</p>

<p>
<a href="http://www.emacswiki.org/emacs/InteractivelyDoThings">ido</a>
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">截圖</h2>
<div class="outline-text-2" id="text-4">

<div class="figure">
<p><img src="./img/emacs-clojure-development.png" alt="emacs-clojure-development.png" />
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openvpn + Vpn Gate + Ruby script]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-10-20-openvpn_and_vpngate.html"/>
    <updated>2013-10-20T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/openvpn_and_vpngate</id>
    <content type="html"><![CDATA[<p>
寫了個連去 vpngate 用的小腳本，不然每次得去官網手動下載設定檔太麻煩了。
</p>

<p>
預設是連質量最高的 Server，也只能連這個，以後看需求重寫吧。
<!-- more -->
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Source</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #586e75;">#</span><span style="color: #586e75;">!/usr/bin/env ruby</span>
<span style="color: #586e75;">### </span><span style="color: #586e75;">1. Download(curl) vpngate csv from offical site</span>
<span style="color: #586e75;">### </span><span style="color: #586e75;">2. Convert csv to ruby array</span>
<span style="color: #586e75;">### </span><span style="color: #586e75;">3. Decode openvpn config by base64</span>
<span style="color: #586e75;">### </span><span style="color: #586e75;">4. Run command openvpn and use the highest score server config file</span>

require <span style="color: #2aa198;">'csv'</span>
require <span style="color: #2aa198;">'base64'</span>
require <span style="color: #2aa198;">'tempfile'</span>

<span style="color: #586e75;">### </span><span style="color: #586e75;">1.</span>
vpngate_csv_url = <span style="color: #2aa198;">"http://www.vpngate.net/api/iphone/"</span>
puts <span style="color: #2aa198;">"==&gt; Downloading vpngate csv from</span><span style="color: #268bd2;"> #{vpngate_csv_url}</span><span style="color: #2aa198;">"</span>
vpngate_ori_csv = <span style="color: #2aa198;">`curl</span><span style="color: #268bd2;"> #{vpngate_csv_url}</span><span style="color: #2aa198;">`</span>
<span style="color: #859900; font-weight: bold;">if</span> <span style="color: #859900; font-weight: bold;">not</span> vpngate_ori_csv.empty?
  puts <span style="color: #2aa198;">"==&gt; Successfully download"</span>
<span style="color: #859900; font-weight: bold;">else</span>
  puts <span style="color: #2aa198;">"==&gt; Fail to download vpngate csv"</span>
  exit 0
<span style="color: #859900; font-weight: bold;">end</span>


<span style="color: #586e75;">### </span><span style="color: #586e75;">2.</span>
vg_rb_csv = <span style="color: #b58900;">CSV</span>.parse(vpngate_ori_csv)
<span style="color: #586e75;"># </span><span style="color: #586e75;">vg_rb_csv[1]</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; ["#HostName", "IP", "Score", "Ping", "Speed", "CountryLong", "CountryShort",</span>
<span style="color: #586e75;">#     </span><span style="color: #586e75;">"NumVpnSessions", "Uptime", "TotalUsers", "TotalTraffic", "LogType", "Operator",</span>
<span style="color: #586e75;">#     </span><span style="color: #586e75;">"Message", "OpenVPN_ConfigData_Base64"]</span>


<span style="color: #586e75;">### </span><span style="color: #586e75;">3.</span>
openvpn_config = <span style="color: #b58900;">Base64</span>.decode64 vg_rb_csv[2][-1] <span style="color: #586e75;"># </span><span style="color: #586e75;">vg_rb_csv[2] is the first server csv data</span>


<span style="color: #586e75;">### </span><span style="color: #586e75;">4.</span>
openvpn_config_file = <span style="color: #b58900;">Tempfile</span>.new(vg_rb_csv[2][0])
openvpn_config_file.write(openvpn_config)
<span style="color: #859900; font-weight: bold;">begin</span>
  puts <span style="color: #2aa198;">"========================================================================"</span>
  puts <span style="color: #2aa198;">"==&gt; Use the highest score server"</span>
  puts <span style="color: #2aa198;">"==&gt; Server info:"</span>
  puts <span style="color: #2aa198;">"    IP</span><span style="color: #268bd2;">:#{vg_rb_csv[2][1]}</span><span style="color: #2aa198;"> Country</span><span style="color: #268bd2;">:#{vg_rb_csv[2][5]}</span><span style="color: #2aa198;"> Ping</span><span style="color: #268bd2;">:#{vg_rb_csv[2][3]}</span><span style="color: #2aa198;">ms Speed</span><span style="color: #268bd2;">:#{vg_rb_csv[2][4][0..3].to_i/100.0}</span><span style="color: #2aa198;">Mbps Score</span><span style="color: #268bd2;">:#{vg_rb_csv[2][2]}</span><span style="color: #2aa198;">"</span>

  openvpn_cmd = <span style="color: #2aa198;">"sudo openvpn --config</span><span style="color: #268bd2;"> #{openvpn_config_file.path}</span><span style="color: #2aa198;">"</span>
  puts <span style="color: #2aa198;">"==&gt; Run openvpn and use vpngate openvpn config file at</span><span style="color: #268bd2;"> #{openvpn_config_file.path}</span><span style="color: #2aa198;">"</span>
  puts openvpn_cmd
  system(openvpn_cmd, <span style="color: #268bd2; font-weight: bold;">out</span>: <span style="color: #268bd2;">$stdout</span>, <span style="color: #268bd2; font-weight: bold;">err</span>: <span style="color: #268bd2; font-weight: bold;">:out</span>)
<span style="color: #859900; font-weight: bold;">ensure</span>
  openvpn_config_file.close
  openvpn_config_file.unlink
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Example</h2>
<div class="outline-text-2" id="text-2">
<pre class="example">
==&gt; Downloading vpngate csv from http://www.vpngate.net/api/iphone/
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 1105k  100 1105k    0     0   583k      0  0:00:01  0:00:01 --:--:--  584k
==&gt; Successfully download
========================================================================
==&gt; Use the highest score server
==&gt; Server info:
    IP:118.108.100.149 Country:Japan Ping:47ms Speed:51.95Mbps Score:536155
==&gt; Run openvpn and use vpngate openvpn config file at /tmp/vg198681512520131020-16665-13qjlwe
sudo openvpn --config /tmp/vg198681512520131020-16665-13qjlwe
</pre>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby block match and jump (emacs evil-mode)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-10-19-evil-ruby-jump-item.html"/>
    <updated>2013-10-19T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/evil-ruby-jump-item</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Description</h2>
<div class="outline-text-2" id="text-1">
<p>
Emacs evil-mode <code>%</code> 功能加上 Ruby block 的配對，例如將光標放在 <code>class Foo</code> 上後鍵入 <code>%</code> 可以跳轉至相符的 <code>end</code> 。
</p>

<p>
<!-- more -->
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Example</h2>
<div class="outline-text-2" id="text-2">

<div class="figure">
<p><img src="./img/evil-ruby-jump-item.gif" alt="evil-ruby-jump-item.gif" />
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Source Code</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #586e75;">;; </span><span style="color: #586e75;">Require package: (evil)</span>
(<span style="color: #859900; font-weight: bold;">evil-define-motion</span> <span style="color: #268bd2;">evil-ruby-jump-item</span> (count)
  <span style="color: #839496; font-weight: bold;">:jump</span> t
  <span style="color: #839496; font-weight: bold;">:type</span> inclusive
  (<span style="color: #859900; font-weight: bold;">cond</span> ((string-match ruby-block-beg-re (current-word))
         (ruby-end-of-block count))
        ((string-match ruby-block-end-re (current-word))
         (ruby-beginning-of-block count))
        (t
         (evil-jump-item count))))

(add-hook 'ruby-mode-hook
          (<span style="color: #859900; font-weight: bold;">lambda</span> ()
            (define-key evil-normal-state-local-map <span style="color: #2aa198;">"%"</span> 'evil-ruby-jump-item)
            (define-key evil-motion-state-local-map <span style="color: #2aa198;">"%"</span> 'evil-ruby-jump-item)))
</pre>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[帕斯卡三角形 (Ruby)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-09-03-pascal-triangle-ruby.html"/>
    <updated>2013-09-03T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/pascal-triangle-ruby</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">帕斯卡三角形</h2>
<div class="outline-text-2" id="text-1">

<div class="figure">
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/PascalTriangleAnimated2.gif/210px-PascalTriangleAnimated2.gif" align="right" alt="210px-PascalTriangleAnimated2.gif"/></p>
</div>

<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">pascal_triangle</span>(n, i = 2, result = [[1], [1,1]])
  <span style="color: #859900; font-weight: bold;">if</span> n == 1
    [[1]]
  <span style="color: #859900; font-weight: bold;">elsif</span> n == 2
    [[1], [1,1]]
  <span style="color: #859900; font-weight: bold;">elsif</span> i == n
    result
  <span style="color: #859900; font-weight: bold;">else</span>
    current_row = [1]
    (i-1).times <span style="color: #859900; font-weight: bold;">do</span> |n|
      current_row &lt;&lt; (result[i-1][n] + result[i-1][n+1])
    <span style="color: #859900; font-weight: bold;">end</span>
    current_row &lt;&lt; 1

    pascal_triangle(n, i+1, result &lt;&lt; current_row)
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<ul class="org-ul">
<li>Image reference: <a href="https://zh.wikipedia.org/zh-tw/%25E6%259D%25A8%25E8%25BE%2589%25E4%25B8%2589%25E8%25A7%2592%25E5%25BD%25A2">Pascal-triangle Wikipedia-chi</a>
</li>
</ul>
<p>
<!-- more -->
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Output</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-ruby">pst = pascal_triangle(7)

puts pst.pretty_inspect

<span style="color: #586e75;">=begin</span>
<span style="color: #586e75;">[[1],</span>
<span style="color: #586e75;"> [1, 1],</span>
<span style="color: #586e75;"> [1, 2, 1],</span>
<span style="color: #586e75;"> [1, 3, 3, 1],</span>
<span style="color: #586e75;"> [1, 4, 6, 4, 1],</span>
<span style="color: #586e75;"> [1, 5, 10, 10, 5, 1],</span>
<span style="color: #586e75;"> [1, 6, 15, 20, 15, 6, 1]]</span>
<span style="color: #586e75;">=&gt; nil</span>
<span style="color: #586e75;">=end</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Check</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-ruby">pst.map {|row| row.reduce(<span style="color: #268bd2; font-weight: bold;">:+</span>) == 2 ** (row.length - 1) }
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [true, true, true, true, true, true, true]</span>
</pre>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs 自動縮進 Ruby's if-else]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-29-emacs-ruby-if-else-intdent.html"/>
    <updated>2013-08-29T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/emacs-ruby-if-else-intdent</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Problem</h2>
<div class="outline-text-2" id="text-1">
<p>
當我打完 elsif 時，他應該要縮進到 if 那邊。
</p>
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">if</span>
   <span style="color: #859900; font-weight: bold;">elsif</span> <span style="color: #586e75;"># </span><span style="color: #586e75;">Should indent this line</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<p>
<!-- more -->
</p>

<p>
正確的 if-else 縮進：
</p>
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">if</span> 1&gt;2
  ....
<span style="color: #859900; font-weight: bold;">elsif</span>
  ...
<span style="color: #859900; font-weight: bold;">else</span>
  ...
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<p>
很明顯 else 和 elsif 是向 if 對齊縮進的。
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Solution</h2>
<div class="outline-text-2" id="text-2">
<p>
發現在 Emacs 上沒有自動縮進 Ruby 的 if-else 語法後，去試了一下 vim 發現可以處理 if-else
的縮進，當然得跟上！
</p>

<p>
最簡單的方法就是在按 <code>space</code> 時，檢查前一個 word 是不是 <code>else</code> 或 <code>elsif</code> 。
</p>

<p>
首先我有用 ruby-electric，這東西會在你打 <code>if</code> 或 <code>class</code> 等等 自動產生一個 <code>end</code>
在下行，他是依據你打 <code>if&lt;space&gt;</code> 的 <code>&lt;space&gt;</code> 時會觸發產生一個 <code>end</code> 。
</p>

<p>
<code>&lt;space&gt;</code> 對應到 ruby-electric-space 這個 funciton，我從 ruby-electric 裡複製過來，很像不應該這樣做，不過不管了。
</p>

<p>
以下是修改過後的版本：
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">ruby-electric-space</span> (arg)
  (interactive <span style="color: #2aa198;">"P"</span>)
  (self-insert-command (prefix-numeric-value arg))
  (<span style="color: #859900; font-weight: bold;">cond</span> ((ruby-electric-space-can-be-expanded-p)
         (<span style="color: #859900; font-weight: bold;">save-excursion</span>
           (ruby-indent-line t)
           (newline)
           (ruby-electric-insert-end)))
        ((ruby-electric-space-can-be-indent-p) (ruby-indent-line t))))

(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">ruby-electric-space-can-be-indent-p</span> ()
  (and (ruby-electric-code-at-point-p)
       (ruby-electric-matching-word-p)))

(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">ruby-electric-matching-word-p</span> ()
  (<span style="color: #859900; font-weight: bold;">save-excursion</span>
    (backward-word)
    (string-match <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\&lt;else\\&gt;</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\&lt;elsif\\&gt;</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span> (current-word))))
</pre>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿姆斯壯數 (Ruby)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-27-armstrong-num-ruby.html"/>
    <updated>2013-08-27T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/armstrong-num-ruby</id>
    <content type="html"><![CDATA[<p>
寫一些簡單的演算法來熟悉 Ruby。
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Armstrong number</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li><a href="https://zh.wikipedia.org/wiki/%25E6%25B0%25B4%25E4%25BB%2599%25E8%258A%25B1%25E6%2595%25B0">阿姆斯壯數 - WiKi</a>
</li>
</ul>
<p>
指一 N 位数，其各个数之 N 次方和等于该数。 <br  />
</p>

<p>
例如 153、370、371 及 407 就是三位數的水仙花数，其各个数之立方和等于该数： <br  />
<!-- more -->
<img src="ltxpng/2013-08-27-armstrong-num-ruby_3c11228c9afa02aa3012bc761d26fc3c0b3b084b.png" alt="$153 = 1^3 + 5^3 + 3^3$" /> <br  />
<img src="ltxpng/2013-08-27-armstrong-num-ruby_e41f84cbd6ed34570ae3573d82d55f21c09ffa21.png" alt="$370 = 3^3 + 7^3 + 0^3$" /> <br  />
<img src="ltxpng/2013-08-27-armstrong-num-ruby_8d7327c9ad437abdf8c5372ec1719e39e9c6d232.png" alt="$371 = 3^3 + 7^3 + 1^3$" /> <br  />
<img src="ltxpng/2013-08-27-armstrong-num-ruby_f55bd90aa0eb111ee965ee939ac4ce682e6aba46.png" alt="$407 = 4^3 + 0^3 + 7^3$" />
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Source code</h2>
<div class="outline-text-2" id="text-2">
<p>
不曉得型別轉來轉去算不算壞習慣&#x2026;。 <br  />
</p>

<p>
有用到 lazy 這個 enumerator，如果沒用 lazy 的話就會當在那裡了，lazy 感覺很像是一個一個求值後在判斷在存值，沒有使用的話則一次全部求值後在做事。 <br  />
</p>

<p>
懶的想怎麼做優化了，怕到時候改一改可讀性就沒現在這個好了，先留這個作筆記。
</p>

<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">class</span> <span style="color: #b58900;">Integer</span>
  <span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">armstrong_num?</span> <span style="color: #586e75;"># </span><span style="color: #586e75;">may be have more better name..</span>
    sum = 0
    digits = <span style="color: #268bd2;">self</span>.to_s.length
    digits.times { |n| sum += (<span style="color: #268bd2;">self</span>.to_s[n].to_i ** digits) }
    <span style="color: #859900; font-weight: bold;">return</span> sum == <span style="color: #268bd2;">self</span>
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>

<span style="color: #586e75;"># </span><span style="color: #586e75;">&#19977;&#20301;&#25976;&#30340;&#25152;&#26377;&#38463;&#22982;&#26031;&#22767;&#25976;</span>
(100...1000).select{ |x| x.armstrong_num? }
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [153, 370, 371, 407]</span>

<span style="color: #586e75;"># </span><span style="color: #586e75;">&#22235;&#20301;&#25976;&#30340;&#31532;&#19968;&#20491;&#38463;&#22982;&#26031;&#22767;&#25976;</span>
(1000...10000).select{ |x| x.armstrong_num? }.first(1)
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [1634]</span>

<span style="color: #586e75;"># </span><span style="color: #586e75;">&#21069; 15 &#20491;&#38463;&#22982;&#26031;&#22767;&#25976;</span>
(1..<span style="color: #b58900;">Float</span>::<span style="color: #b58900;">INFINITY</span>).lazy.select{ |x| x.armstrong_num? }.first(15)
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407, 1634, 8208]</span>

<span style="color: #586e75;"># </span><span style="color: #586e75;">&#21069;&#19977;&#20491;&#38463;&#22982;&#26031;&#22767;&#25976;&#65292;&#24478;&#19977;&#20301;&#25976;&#38283;&#22987;</span>
(100..<span style="color: #b58900;">Float</span>::<span style="color: #b58900;">INFINITY</span>).lazy.select{ |x| x.armstrong_num? }.first(3)
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [153, 370, 371]</span>
</pre>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[產生一組不重複整數的集合(Ruby)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-25-gen-uniq-nums-ruby.html"/>
    <updated>2013-08-25T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/gen-uniq-nums-ruby</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">Normal Way - 1</a></li>
<li><a href="#sec-2">Normal Way - 2</a></li>
<li><a href="#sec-3">Set Way</a></li>
<li><a href="#sec-4">Range Way - 1</a></li>
<li><a href="#sec-5">Range Way - 2</a></li>
<li><a href="#sec-6">Benchmark them</a></li>
</ul>
</div>
</div>
<p>
先用 Ruby 寫以前上 Android 中猜數字範例中用到的算法：
</p>

<p>
<!-- more -->
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Normal Way - 1</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">get_uniq_nums</span>(size, range)
  ary = []
  <span style="color: #859900; font-weight: bold;">begin</span>
    r = rand(range)
    <span style="color: #859900; font-weight: bold;">if</span> ary.member?(r)
      <span style="color: #859900; font-weight: bold;">next</span>
    <span style="color: #859900; font-weight: bold;">else</span>
      ary &lt;&lt; r
    <span style="color: #859900; font-weight: bold;">end</span>
  <span style="color: #859900; font-weight: bold;">end</span> <span style="color: #859900; font-weight: bold;">while</span>( ary.length &lt; size )
  <span style="color: #859900; font-weight: bold;">return</span> ary
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<p>
記得之前教的不是用 member 的方法來判斷，當初沒有提到用到集合的概念寫，好像是檢查前面幾個數字的迴圈吧，那陀 Java 程式碼已經忘光了。
</p>

<p>
這是產生 4 個不重複 1~9 的數字，放在一個陣列裡面 <br  />
<code>get_uniq_nums(4, (1...10))</code> <br  />
</p>

<p>
變成一個數字，先 join 把他連在一起變成字串，在轉回數字。 <br  />
<code>get_uniq_nums(4, (1...10)).join.to_i</code> <br  />
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Normal Way - 2</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">get_uniq_nums</span>(size, range, ary = [])
  <span style="color: #859900; font-weight: bold;">if</span> size.zero?
    ary
  <span style="color: #859900; font-weight: bold;">elsif</span> ary.member?(r = rand(range))
    get_uniq_nums(size , range, ary)
  <span style="color: #859900; font-weight: bold;">else</span>
    get_uniq_nums(size - 1, range, (ary &lt;&lt; r))
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>
<p>
試了別種寫法，很像叫尾遞迴的方法，跟普通遞迴好像差別在多用一個參數在存值，在
Emacs lisp 很像還要多用一個函數才能不影響原來的接口。順便一提，弄不出一個函數的普通遞迴方法。
</p>

<p>
以下是普通遞迴版失敗品：
</p>

<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">get_uniq_nums</span>(size, range)
  <span style="color: #859900; font-weight: bold;">if</span> size.zero?
    []
  <span style="color: #859900; font-weight: bold;">elsif</span> get_uniq_nums(size, range).member?(r = rand(range))
    get_uniq_nums(size, range)
  <span style="color: #859900; font-weight: bold;">else</span>
    get_uniq_nums(size - 1, range) &lt;&lt; r
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Set Way</h2>
<div class="outline-text-2" id="text-3">
<p>
放狗一搜，找到了其他方法：
</p>
<ul class="org-ul">
<li><a href="http://stackoverflow.com/questions/119107/how-do-i-generate-a-list-of-n-unique-random-numbers-in-ruby">How do I generate a list of n unique random numbers in Ruby?</a>
</li>
</ul>

<blockquote>
<p>
Set implements a collection of unordered values with no duplicates.
</p>
</blockquote>

<div class="org-src-container">

<pre class="src src-ruby">require <span style="color: #2aa198;">'set'</span>

<span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">rand_n</span>(n, max)
  randoms = <span style="color: #b58900;">Set</span>.new
  loop <span style="color: #859900; font-weight: bold;">do</span>
    randoms &lt;&lt; rand(max)
    <span style="color: #859900; font-weight: bold;">return</span> randoms.to_a <span style="color: #859900; font-weight: bold;">if</span> randoms.size &gt;= n
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<p>
好吧&#x2026;原來 Ruby 內建了 Set 的資料型態，第一次發現有內建集合的程式語言，當初應該要想到 Java 中有沒有這東西。 上面是用集合內不重複元素的特性，所以在加入元素時天生就會檢查有沒有重複，最後在轉成陣列。
</p>


<p>
看來以後可以玩玩看交集、聯集、差集之類的，還有子集合判斷之類的。
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Range Way - 1</h2>
<div class="outline-text-2" id="text-4">
<blockquote>
<p>
A Range represents an interval&#x2014;a set of values with a beginning and
an end.
</p>
</blockquote>

<div class="org-src-container">

<pre class="src src-ruby">range = 0...1000000
how_many = 10000

<span style="color: #586e75;"># </span><span style="color: #586e75;">first way</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">Array::sample Choose a random element or n random elements from the array.</span>
range.to_a.sample(how_many)

<span style="color: #586e75;"># </span><span style="color: #586e75;">second way</span>
(range).sort_by{rand}[0...how_many]
</pre>
</div>

<p>
直接從 Range 裡用內建的方法隨機挑，行數完敗上面那兩個。
</p>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Range Way - 2</h2>
<div class="outline-text-2" id="text-5">
<p>
突然想到如果要在生成時就篩選掉不想要數字的話，要怎麼做？
</p>

<p>
仔細一想很簡單，直接在在範圍裡改。
</p>

<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #586e75;"># </span><span style="color: #586e75;">Delete 2 from the range of rand</span>
(1..4).reject { |x| x==2 }.to_a.sample(how_many)
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">Benchmark them</h2>
<div class="outline-text-2" id="text-6">
</div><div id="outline-container-sec-6-1" class="outline-3">
<h3 id="sec-6-1">Part 1</h3>
<div class="outline-text-3" id="text-6-1">
<div class="org-src-container">

<pre class="src src-ruby">require <span style="color: #2aa198;">'benchmark'</span>

range = 0...1000000
how_many = 10000

<span style="color: #586e75;">## </span><span style="color: #586e75;">Range way - 1</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  range.to_a.sample(how_many)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 0.076334817</span>

<span style="color: #586e75;">## </span><span style="color: #586e75;">Set Way</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  rand_n(how_many, range)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 0.01060032</span>

<span style="color: #586e75;">## </span><span style="color: #586e75;">Normal way - 1</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  get_uniq_nums(how_many, range)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 3.565261117</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-6-2" class="outline-3">
<h3 id="sec-6-2">Part 2</h3>
<div class="outline-text-3" id="text-6-2">
<div class="org-src-container">

<pre class="src src-ruby">range = 0...1000000
how_many = 1000000

<span style="color: #586e75;">## </span><span style="color: #586e75;">Set Way</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  rand_n(how_many, range)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 11.305328646</span>

<span style="color: #586e75;">## </span><span style="color: #586e75;">Range way - 1</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  range.to_a.sample(how_many)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 0.112987391</span>
</pre>
</div>

<p>
Range Way 完敗。 還有沒有實現 Set Way 和 Normal Way 的篩選的功能。
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Org-mode + Octopress + Github 來搭建 Blog]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-23-emacs-org-octopress.html"/>
    <updated>2013-08-23T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/emacs-org-octopress</id>
    <content type="html"><![CDATA[<ul class="org-ul">
<li>優點
<ul class="org-ul">
<li>免費網域、免費託管、免費流量
</li>
<li>版本管理，不用擔心備份！
</li>
<li>Org-mode or Markdown 撰寫效率好
</li>
</ul>
</li>
<li>缺點
<ul class="org-ul">
<li>技術門檻要求較高 <br/>
    需要懂一些 Git, Github, Org-mode 或 Makrdown，更進階要客製化 Blog 的話，可能還要懂些許 Ruby (jekyll)
</li>
<li>Org-mode 的 code block 沒有 markdown&#8217;s code block 的 title url 功能。
</li>
</ul>
</li>
</ul>

<p>
<!-- more -->
</p>

<hr/>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Org-mode</h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system. <br/>
<b><a href="http://orgmode.org/">http://orgmode.org/</a></b>
</p>
</blockquote>
<p>
Org-mode 是建立於 Emacs(編輯器) 之上的插件，是一種輕量級的標記語言可以用來做時間管理、筆記、生成 Html &#x2026; ，同類型的流行的還有 Markdown，這篇文章基本上就是
Emacs + org-mode 寫的，之後在透過插件 <a href="https://github.com/yoshinari-nomura/org-octopress">org-octopress</a> 生成給 Octopress 用。
</p>
</div>


<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">Install Emacs(24.x)</h3>
<div class="outline-text-3" id="text-1-1">
<p>
我只會在 Linux 平台上用 Package 裝。
</p>

<p>
一些流行的 Linux distribution 的 Package Manager 安裝方法。
</p>
<div class="org-src-container">

<pre class="src src-sh">pacman -S emacs          <span style="color: #586e75;"># </span><span style="color: #586e75;">Archlinux</span>
apt-get install emacs    <span style="color: #586e75;"># </span><span style="color: #586e75;">Ubuntu</span>
yum install emacs        <span style="color: #586e75;"># </span><span style="color: #586e75;">Fedora</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">Install org and org-octopress</h3>
<div class="outline-text-3" id="text-1-2">
<p>
用 Emacs 裡的 Package Manager 安裝：
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #586e75;"># </span><span style="color: #586e75;">&#22312;&#23478;&#30446;&#37636;&#24314;&#19968;&#20491; .emacs.d &#36039;&#26009;&#22846;&#24460;&#65292;&#22312;&#35041;&#38754;&#24314; init.el</span>
mkdir ~/.emacs.d
touch ~/.emacs.d/init.el
</pre>
</div>

<p>
在 init.el 添加：
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-to-list 'package-archives
  '(<span style="color: #2aa198;">"marmalade"</span> . <span style="color: #2aa198;">"http://marmalade-repo.org/packages/"</span>))

(add-to-list 'package-archives
  '(<span style="color: #2aa198;">"melpa"</span> . <span style="color: #2aa198;">"http://melpa.milkbox.net/packages/"</span>) t)

(package-initialize)
</pre>
</div>

<p>
開啟 Emacs 鍵入 <code>M-x package-install org RET</code> ，把 org 換成 org-octopress 後安裝。
</p>
</div>
</div>
<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">Org-octopress Setup</h3>
<div class="outline-text-3" id="text-1-3">
<p>
以下是從 <a href="https://github.com/yoshinari-nomura/org-octopress">org-octopress</a> 的 README 裡擷取 Basic Settings 的片段。
</p>

<p>
添加在 init.el。
</p>
<ul class="org-ul">
<li>Emacs Settings:
</li>
</ul>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">require</span> '<span style="color: #268bd2; font-weight: bold;">org-octopress</span>)
(setq org-octopress-directory-top       <span style="color: #2aa198;">"~/octopress/source"</span>)
(setq org-octopress-directory-posts     <span style="color: #2aa198;">"~/octopress/source/_posts"</span>)
(setq org-octopress-directory-org-top   <span style="color: #2aa198;">"~/octopress/source"</span>)
(setq org-octopress-directory-org-posts <span style="color: #2aa198;">"~/octopress/source/blog"</span>)
(setq org-octopress-setup-file          <span style="color: #2aa198;">"~/org-sty/setupfile.org"</span>)
</pre>
</div>

<ul class="org-ul">
<li>Octopress Settings:
</li>
</ul>
<p>
In octopress/_config.yml, you must set the permelink attribute: <br/>
<code>permalink: /blog/:year-:month-:day-:title.html</code>
</p>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Octopress</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="http://octopress.org/">Octopress</a> 是一套 Blog 的框架，所以一開始你的 Blog 就有一個簡潔的外觀，功能上有支援 Twitter, Facebook, Delicious 等等，也可以用來產生靜態 Blog 後放在 Github
上，預設是用 Markdown 來撰寫文章。
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Install and Use Octopress</h3>
<div class="outline-text-3" id="text-2-1">
<p>
要先安裝 <a href="http://www.ruby-lang.org/en/">Ruby</a> 和 <a href="http://gitscm.com/">Git</a>。 <br/>
官方的方法： <a href="http://octopress.org/docs/setup/">Octopress Setup</a>
</p>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Github</h2>
<div class="outline-text-2" id="text-3">
<p>
首先有個 <a href="https://github.com/">Github</a> 的帳號後，建立一個 Repository 為 username.github.io，之後去你的 octopress 的根目錄鍵入 <code>bundle exec rake setup_github_page</code> 輸入剛剛建完給你的 url。
</p>

<p>
官方文檔: <a href="https://help.github.com/">GithubHelp</a>
</p>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">基本流程</h2>
<div class="outline-text-2" id="text-4">
<ol class="org-ol">
<li>開啟 Emacs 鍵入 <code>M-x org-octopress RET</code> ，會到 org-octopress 的界面鍵入 <code>w</code>
和標題，開始撰寫文章。
</li>
<li>寫完後，鍵入 <code>C-c C-e P x octopress</code> 來生成靜態網頁
</li>
<li>在你的 octopress 根目錄鍵入 <code>bundle exec rake gen_deploy</code>
</li>
<li>也可以把 source branch 下 push 上去做版本管理 <code>git push -u origin source</code>
</li>
</ol>

<p>
文章打到一半或要做確認的時候用(需先生成靜態網頁) <code>bundle exec rake preview</code> ，之後在
<a href="http://localhost:4000/">http://localhost:4000/</a> 可以看你的 Blog。
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解決 Org-mode(8.x) 轉 Html 中文換行變空格問題]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-19-han-extra-space-org-mode.html"/>
    <updated>2013-08-19T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/han-extra-space-org-mode</id>
    <content type="html"><![CDATA[<p>
基本上是照這兩篇提供的解法去依樣畫葫蘆出來的 org-mode 版本。
</p>
<ul class="org-ul">
<li><a href="http://stackoverflow.com/questions/8550112/prevent-browser-converting-n-between-lines-into-space-for-chinese-characters/8551033#8551033">Prevent browser converting &#8216;\n&#8217; between lines into space (for Chinese characters)</a>
</li>
<li><a href="http://chenyufei.info/blog/2011-12-23/fix-chinese-newline-becomes-space-in-browser-problem/">解决 Markdown 转 HTML 中文换行变空格的问题</a>
</li>
</ul>

<p>
<!-- more -->
</p>

<p>
大致上的解法是將 html 檔案裡，將中文字後有接個換行符的把他合併為一行。 <br  />
感覺上是個 workaround 的方法，如果在餵給 rss 似乎又會有問題，不過我無法忍受那些多餘的空格。
</p>

<p>
代碼如下：
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">han/org-html-delete-extra-space</span> (string backend info)
  <span style="color: #2aa198;">"Let chinese word to a line if match /han\newline/"</span>
  (<span style="color: #859900; font-weight: bold;">when</span> (and (org-export-derived-backend-p backend 'html)
             (string-match <span style="color: #2aa198;">"\\cc\n"</span> string))
    (replace-regexp-in-string <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\cc</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">\n</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\cc</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span> <span style="color: #2aa198;">"\\1\\2"</span> string)))

(<span style="color: #859900; font-weight: bold;">eval-after-load</span> 'ox-html
  '(add-to-list 'org-export-filter-final-output-functions
                'han/org-html-delete-extra-space))
</pre>
</div>

<p>
順便吐槽一下 emacs 裡的 regex，實在太多 <code>\</code> 了 <br  />
這是上面連結文中 Ruby 的 Regex 樣式：
</p>
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #586e75;"># </span><span style="color: #586e75;">\p{Han} &#26159;&#28450;&#23383;</span>
gsub(<span style="color: #2aa198;">/(\p{Han})\n(\p{Han})/</span>m, <span style="color: #2aa198;">'\1\2'</span>)
</pre>
</div>
<p>
這是 Emacs-lisp 的：
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #586e75;">;; </span><span style="color: #586e75;">\\cc &#26159;&#28450;&#23383;</span>
(replace-regexp-in-string <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\cc</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">\n</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\cc</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span> <span style="color: #2aa198;">"\\1\\2"</span> string)
</pre>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Pentadactyl (Firefox add-on)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-17-my-pentadactyl-tip.html"/>
    <updated>2013-08-17T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/my-pentadactyl-tip</id>
    <content type="html"><![CDATA[<blockquote>
<p>
Pentadactyl is a free browser add-on for Firefox, designed to make browsing more
efficient and especially more keyboard accessible.
</p>
</blockquote>
<p>
<a href="http://5digits.org/pentadactyl/index">Pentadactyl</a> 是一個能讓你快速瀏覽網頁的一個火狐插件，其特點是用 Vim-like 的方式來使用，也可以是說是以鍵盤來做瀏覽動作的一套按法。
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">一些使用心得</h2>
<div class="outline-text-2" id="text-1">
<p>
<!-- more -->
先聲明有些是定制後的 Pentadactyl 才有的，所以預設的行為會和以下有些出入，還有我的鍵盤的敏感度也調高了。
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">快速移動</h3>
<div class="outline-text-3" id="text-1-1">
<p>
按鍵 <code>j k</code> 分別為上下移動網頁約5%， <code>h l</code> 為切換瀏覽至左和右邊的 Tab <code>space</code> 為向下一個 page ，加前綴 shift 為上。僅僅這些基礎移動就大大超越還在用和滑鼠點擊分頁的我了！但失去滑鼠滾輪還是有差別的，所以我的使用習慣變為 <code>space</code> 在網頁上下移動後，之後使用 <code>j k</code> 微調一下。 <code>gg</code> 和 <code>G</code> 為頁首和尾。還有 Mark 頁面的功能呢！
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">如何點超連結？</h3>
<div class="outline-text-3" id="text-1-2">
<p>
這有點說不清，實際用的情況是 <code>f</code> 後連結上頭會跑出英文字母，之後在照順序輸入你眼睛盯著的連結上的英文字母， <code>F</code> 則是會開新分頁，是一個很實用的功能，我把連結上頭出現的東西改成以 <code>asdfjkl;</code> 排，這樣八個鍵，連移動手指頭都不需要！
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">開啟網頁</h3>
<div class="outline-text-3" id="text-1-3">
<p>
<code>o</code> 在當前頁面開啟網頁， <code>t</code> 為開在新分頁，開啟後鍵入關鍵字，預設會使用 Google 搜尋，有個很棒的功能叫 Auto-Completion ，使用時會根據關鍵字給予補全，這類似你在
Google 的搜尋欄鍵入關鍵字時會從下方跑出一個列表供你選擇，常用補全的東西有歷史紀錄和剛剛提到搜尋引擎的補全，更多其他補全我也還不清楚但已經很夠用了。
</p>

<p>
例如輸入個巴會出現我最近看到的和巴哈姆特有關聯的網址和 title 但卻還跑出和巴士海峽相關的東西，當然能允許你更精確列出來，接個空白鍵和 gamer 或哈，就會產生更加有關聯的資訊了。
</p>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">其他實用的功能</h3>
<div class="outline-text-3" id="text-1-4">
<p>
<code>r</code> 為更新網頁、 <code>d</code> 為刪除 、 <code>b</code> 則是變成文字輸出你的分頁後選擇， <code>數字+b</code> 則是直接跳轉至指定Tab， <code>/</code> 是搜尋當前頁面， <code>u</code> 回復剛關閉的頁面也能補全最近關過的頁面， <code>Esc</code> 取消，其他的上官網看吧。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">一個小短片</h2>
<div class="outline-text-2" id="text-2">
<p>
兩分鐘的影片
</p>

<p>
<a href="http://youtu.be/BuANeWJR-lM">Pentadactyl show on youtube</a>
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一次寫 Blog]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-17-first-write-blog.html"/>
    <updated>2013-08-17T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/first-write-blog</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Why?</h2>
<div class="outline-text-2" id="text-1">
<p>
上大學後發現太久沒寫文章過，想練練撰寫文章的能力，所以創了個 Blog 在 github 。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">主要 Blog 的內容</h2>
<div class="outline-text-2" id="text-2">
<p>
分享一些跟技術或電腦有關的心得，由於撰寫能力不知道退化到什麼地步，以少量多篇慢慢開始吧！
</p>


<p>
<!-- more -->
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初入網頁設計]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-17-about-web-programming.html"/>
    <updated>2013-08-17T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/about-web-programming</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">因為暑假很無聊，所以&#x2026;</h2>
<div class="outline-text-2" id="text-1">
<p>
來學學網頁設計！
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">初入 Web</h2>
<div class="outline-text-2" id="text-2">
<p>
關於網頁的知識處於懵懵懂懂的狀態，所去了<a href="http://www.codecademy.com/"> Codecademy</a> 學了些基本的 Html 和 Css 語法後
<!-- more -->看到了也有 Ruby 的教學，靈光一閃想起了一個東西 <code>Ruby on Rails</code> ，一個Web應用框
架！結束了在 Codecademy 的 Ruby 教學，遂開始了 Rails 的<a href="http://ihower.tw/rails3/index.html">學習</a> ，不料這完完全全就是個坑，什麼
<code>MVC架構</code> 和 <code>Restful</code> 還有 Ruby 的 =Convention over configuration=對新手來說實在太痛了，
我看在撐一個禮拜看能不能習慣。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">結論</h2>
<div class="outline-text-2" id="text-3">
<p>
雖然學了些東西不過還是沒有對做一個網頁有什麼實體的感覺，看到一些Rails的課程著重於實
戰，真心想報名!，不過暑假快過完了，我看就靠自己摸索吧。
</p>
</div>
</div>
]]></content>
  </entry>
  
</feed>
