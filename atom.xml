<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[XuBlog]]></title>
  <link href="http://XuHaoJun.github.io/atom.xml" rel="self"/>
  <link href="http://XuHaoJun.github.io/"/>
  <updated>2013-10-19T16:28:47+08:00</updated>
  <id>http://XuHaoJun.github.io/</id>
  <author>
    <name><![CDATA[XuHaoJun]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby block match and jump (emacs)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-10-19-evil-ruby-jump-item.html"/>
    <updated>2013-10-19T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/evil-ruby-jump-item</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">test</h2>
<div class="outline-text-2" id="text-1">

<div class="figure">
<p><img src="./img/evil-ruby-jump-item.gif" alt="evil-ruby-jump-item.gif" />
</p>
</div>

<p>
<!-- more -->
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[帕斯卡三角形 (Ruby)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-09-03-pascal-triangle-ruby.html"/>
    <updated>2013-09-03T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/pascal-triangle-ruby</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">帕斯卡三角形</h2>
<div class="outline-text-2" id="text-1">

<div class="figure">
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/0d/PascalTriangleAnimated2.gif/210px-PascalTriangleAnimated2.gif" align="right" alt="210px-PascalTriangleAnimated2.gif"/></p>
</div>

<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">pascal_triangle</span>(n, i = 2, result = [[1], [1,1]])
  <span style="color: #859900; font-weight: bold;">if</span> n == 1
    [[1]]
  <span style="color: #859900; font-weight: bold;">elsif</span> n == 2
    [[1], [1,1]]
  <span style="color: #859900; font-weight: bold;">elsif</span> i == n
    result
  <span style="color: #859900; font-weight: bold;">else</span>
    current_row = [1]
    (i-1).times <span style="color: #859900; font-weight: bold;">do</span> |n|
      current_row &lt;&lt; (result[i-1][n] + result[i-1][n+1])
    <span style="color: #859900; font-weight: bold;">end</span>
    current_row &lt;&lt; 1

    pascal_triangle(n, i+1, result &lt;&lt; current_row)
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<ul class="org-ul">
<li>Image reference: <a href="https://zh.wikipedia.org/zh-tw/%25E6%259D%25A8%25E8%25BE%2589%25E4%25B8%2589%25E8%25A7%2592%25E5%25BD%25A2">Pascal-triangle Wikipedia-chi</a>
</li>
</ul>
<p>
<!-- more -->
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Output</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-ruby">pst = pascal_triangle(7)

puts pst.pretty_inspect

<span style="color: #586e75;">=begin</span>
<span style="color: #586e75;">[[1],</span>
<span style="color: #586e75;"> [1, 1],</span>
<span style="color: #586e75;"> [1, 2, 1],</span>
<span style="color: #586e75;"> [1, 3, 3, 1],</span>
<span style="color: #586e75;"> [1, 4, 6, 4, 1],</span>
<span style="color: #586e75;"> [1, 5, 10, 10, 5, 1],</span>
<span style="color: #586e75;"> [1, 6, 15, 20, 15, 6, 1]]</span>
<span style="color: #586e75;">=&gt; nil</span>
<span style="color: #586e75;">=end</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Check</h2>
<div class="outline-text-2" id="text-3">
<div class="org-src-container">

<pre class="src src-ruby">pst.map {|row| row.reduce(<span style="color: #268bd2; font-weight: bold;">:+</span>) == 2 ** (row.length - 1) }
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [true, true, true, true, true, true, true]</span>
</pre>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs 自動縮進 Ruby's if-else]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-29-emacs-ruby-if-else-intdent.html"/>
    <updated>2013-08-29T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/emacs-ruby-if-else-intdent</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Problem</h2>
<div class="outline-text-2" id="text-1">
<p>
當我打完 elsif 時，他應該要縮進到 if 那邊。
</p>
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">if</span>
   <span style="color: #859900; font-weight: bold;">elsif</span> <span style="color: #586e75;"># </span><span style="color: #586e75;">Should indent this line</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<p>
<!-- more -->
</p>

<p>
正確的 if-else 縮進：
</p>
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">if</span> 1&gt;2
  ....
<span style="color: #859900; font-weight: bold;">elsif</span>
  ...
<span style="color: #859900; font-weight: bold;">else</span>
  ...
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<p>
很明顯 else 和 elsif 是向 if 對齊縮進的。
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Solution</h2>
<div class="outline-text-2" id="text-2">
<p>
發現在 Emacs 上沒有自動縮進 Ruby 的 if-else 語法後，去試了一下 vim 發現可以處理 if-else
的縮進，當然得跟上！
</p>

<p>
最簡單的方法就是在按 <code>space</code> 時，檢查前一個 word 是不是 <code>else</code> 或 <code>elsif</code> 。
</p>

<p>
首先我有用 ruby-electric，這東西會在你打 <code>if</code> 或 <code>class</code> 等等 自動產生一個 <code>end</code>
在下行，他是依據你打 <code>if&lt;space&gt;</code> 的 <code>&lt;space&gt;</code> 時會觸發產生一個 <code>end</code> 。
</p>

<p>
<code>&lt;space&gt;</code> 對應到 ruby-electric-space 這個 funciton，我從 ruby-electric 裡複製過來，很像不應該這樣做，不過不管了。
</p>

<p>
以下是修改過後的版本：
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">ruby-electric-space</span> (arg)
  (interactive <span style="color: #2aa198;">"P"</span>)
  (self-insert-command (prefix-numeric-value arg))
  (<span style="color: #859900; font-weight: bold;">cond</span> ((ruby-electric-space-can-be-expanded-p)
         (<span style="color: #859900; font-weight: bold;">save-excursion</span>
           (ruby-indent-line t)
           (newline)
           (ruby-electric-insert-end)))
        ((ruby-electric-space-can-be-indent-p) (ruby-indent-line t))))

(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">ruby-electric-space-can-be-indent-p</span> ()
  (and (ruby-electric-code-at-point-p)
       (ruby-electric-matching-word-p)))

(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">ruby-electric-matching-word-p</span> ()
  (<span style="color: #859900; font-weight: bold;">save-excursion</span>
    (backward-word)
    (string-match <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\&lt;else\\&gt;</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">|</span><span style="color: #2aa198;">\\&lt;elsif\\&gt;</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span> (current-word))))
</pre>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿姆斯壯數 (Ruby)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-27-armstrong-num-ruby.html"/>
    <updated>2013-08-27T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/armstrong-num-ruby</id>
    <content type="html"><![CDATA[<p>
寫一些簡單的演算法來熟悉 Ruby。
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Armstrong number</h2>
<div class="outline-text-2" id="text-1">
<ul class="org-ul">
<li><a href="https://zh.wikipedia.org/wiki/%25E6%25B0%25B4%25E4%25BB%2599%25E8%258A%25B1%25E6%2595%25B0">阿姆斯壯數 - WiKi</a>
</li>
</ul>
<p>
指一 N 位数，其各个数之 N 次方和等于该数。 <br/>
</p>

<p>
例如 153、370、371 及 407 就是三位數的水仙花数，其各个数之立方和等于该数： <br/>
<!-- more -->
<img src="ltxpng/2013-08-27-armstrong-num-ruby_e141c033bb0e669b266fc28f8d36f2011481ba63.png"  alt="$153 = 1^3 + 5^3 + 3^3$"/> <br/>
<img src="ltxpng/2013-08-27-armstrong-num-ruby_9eb5ee3740baed1f5a29bcd886e4d39db8abae6f.png"  alt="$370 = 3^3 + 7^3 + 0^3$"/> <br/>
<img src="ltxpng/2013-08-27-armstrong-num-ruby_06e1db69575b29de5a03efa3759af10c7e7d8c4c.png"  alt="$371 = 3^3 + 7^3 + 1^3$"/> <br/>
<img src="ltxpng/2013-08-27-armstrong-num-ruby_8b45137dca877cbbdfd1f5e616004b03035b6add.png"  alt="$407 = 4^3 + 0^3 + 7^3$"/>
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Source code</h2>
<div class="outline-text-2" id="text-2">
<p>
不曉得型別轉來轉去算不算壞習慣&#x2026;。 <br/>
</p>

<p>
有用到 lazy 這個 enumerator，如果沒用 lazy 的話就會當在那裡了，lazy 感覺很像是一個一個求值後在判斷在存值，沒有使用的話則一次全部求值後在做事。 <br/>
</p>

<p>
懶的想怎麼做優化了，怕到時候改一改可讀性就沒現在這個好了，先留這個作筆記。
</p>

<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">class</span> <span style="color: #b58900;">Integer</span>
  <span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">armstrong_num?</span> <span style="color: #586e75;"># </span><span style="color: #586e75;">may be have more better name..</span>
    sum = 0
    digits = <span style="color: #268bd2;">self</span>.to_s.length
    digits.times { |n| sum += (<span style="color: #268bd2;">self</span>.to_s[n].to_i ** digits) }
    <span style="color: #859900; font-weight: bold;">return</span> sum == <span style="color: #268bd2;">self</span>
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>

<span style="color: #586e75;"># </span><span style="color: #586e75;">&#19977;&#20301;&#25976;&#30340;&#25152;&#26377;&#38463;&#22982;&#26031;&#22767;&#25976;</span>
(100...1000).select{ |x| x.armstrong_num? }
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [153, 370, 371, 407]</span>

<span style="color: #586e75;"># </span><span style="color: #586e75;">&#22235;&#20301;&#25976;&#30340;&#31532;&#19968;&#20491;&#38463;&#22982;&#26031;&#22767;&#25976;</span>
(1000...10000).select{ |x| x.armstrong_num? }.first(1)
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [1634]</span>

<span style="color: #586e75;"># </span><span style="color: #586e75;">&#21069; 15 &#20491;&#38463;&#22982;&#26031;&#22767;&#25976;</span>
(1..<span style="color: #b58900;">Float</span>::<span style="color: #b58900;">INFINITY</span>).lazy.select{ |x| x.armstrong_num? }.first(15)
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407, 1634, 8208]</span>

<span style="color: #586e75;"># </span><span style="color: #586e75;">&#21069;&#19977;&#20491;&#38463;&#22982;&#26031;&#22767;&#25976;&#65292;&#24478;&#19977;&#20301;&#25976;&#38283;&#22987;</span>
(100..<span style="color: #b58900;">Float</span>::<span style="color: #b58900;">INFINITY</span>).lazy.select{ |x| x.armstrong_num? }.first(3)
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; [153, 370, 371]</span>
</pre>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[產生一組不重複整數的集合(Ruby)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-25-gen-uniq-nums-ruby.html"/>
    <updated>2013-08-25T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/gen-uniq-nums-ruby</id>
    <content type="html"><![CDATA[<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">Normal Way - 1</a></li>
<li><a href="#sec-2">Normal Way - 2</a></li>
<li><a href="#sec-3">Set Way</a></li>
<li><a href="#sec-4">Range Way - 1</a></li>
<li><a href="#sec-5">Range Way - 2</a></li>
<li><a href="#sec-6">Benchmark them</a></li>
</ul>
</div>
</div>
<p>
先用 Ruby 寫以前上 Android 中猜數字範例中用到的算法：
</p>

<p>
<!-- more -->
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Normal Way - 1</h2>
<div class="outline-text-2" id="text-1">
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">get_uniq_nums</span>(size, range)
  ary = []
  <span style="color: #859900; font-weight: bold;">begin</span>
    r = rand(range)
    <span style="color: #859900; font-weight: bold;">if</span> ary.member?(r)
      <span style="color: #859900; font-weight: bold;">next</span>
    <span style="color: #859900; font-weight: bold;">else</span>
      ary &lt;&lt; r
    <span style="color: #859900; font-weight: bold;">end</span>
  <span style="color: #859900; font-weight: bold;">end</span> <span style="color: #859900; font-weight: bold;">while</span>( ary.length &lt; size )
  <span style="color: #859900; font-weight: bold;">return</span> ary
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<p>
記得之前教的不是用 member 的方法來判斷，當初沒有提到用到集合的概念寫，好像是檢查前面幾個數字的迴圈吧，那陀 Java 程式碼已經忘光了。
</p>

<p>
這是產生 4 個不重複 1~9 的數字，放在一個陣列裡面 <br/>
<code>get_uniq_nums(4, (1...10))</code> <br/>
</p>

<p>
變成一個數字，先 join 把他連在一起變成字串，在轉回數字。 <br/>
<code>get_uniq_nums(4, (1...10)).join.to_i</code> <br/>
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Normal Way - 2</h2>
<div class="outline-text-2" id="text-2">
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">get_uniq_nums</span>(size, range, ary = [])
  <span style="color: #859900; font-weight: bold;">if</span> size.zero?
    ary
  <span style="color: #859900; font-weight: bold;">elsif</span> ary.member?(r = rand(range))
    get_uniq_nums(size , range, ary)
  <span style="color: #859900; font-weight: bold;">else</span>
    get_uniq_nums(size - 1, range, (ary &lt;&lt; r))
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>
<p>
試了別種寫法，很像叫尾遞迴的方法，跟普通遞迴好像差別在多用一個參數在存值，在
Emacs lisp 很像還要多用一個函數才能不影響原來的接口。順便一提，弄不出一個函數的普通遞迴方法。
</p>

<p>
以下是普通遞迴版失敗品：
</p>

<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">get_uniq_nums</span>(size, range)
  <span style="color: #859900; font-weight: bold;">if</span> size.zero?
    []
  <span style="color: #859900; font-weight: bold;">elsif</span> get_uniq_nums(size, range).member?(r = rand(range))
    get_uniq_nums(size, range)
  <span style="color: #859900; font-weight: bold;">else</span>
    get_uniq_nums(size - 1, range) &lt;&lt; r
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Set Way</h2>
<div class="outline-text-2" id="text-3">
<p>
放狗一搜，找到了其他方法：
</p>
<ul class="org-ul">
<li><a href="http://stackoverflow.com/questions/119107/how-do-i-generate-a-list-of-n-unique-random-numbers-in-ruby">How do I generate a list of n unique random numbers in Ruby?</a>
</li>
</ul>

<blockquote>
<p>
Set implements a collection of unordered values with no duplicates.
</p>
</blockquote>

<div class="org-src-container">

<pre class="src src-ruby">require <span style="color: #2aa198;">'set'</span>

<span style="color: #859900; font-weight: bold;">def</span> <span style="color: #268bd2;">rand_n</span>(n, max)
  randoms = <span style="color: #b58900;">Set</span>.new
  loop <span style="color: #859900; font-weight: bold;">do</span>
    randoms &lt;&lt; rand(max)
    <span style="color: #859900; font-weight: bold;">return</span> randoms.to_a <span style="color: #859900; font-weight: bold;">if</span> randoms.size &gt;= n
  <span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #859900; font-weight: bold;">end</span>
</pre>
</div>

<p>
好吧&#x2026;原來 Ruby 內建了 Set 的資料型態，第一次發現有內建集合的程式語言，當初應該要想到 Java 中有沒有這東西。 上面是用集合內不重複元素的特性，所以在加入元素時天生就會檢查有沒有重複，最後在轉成陣列。
</p>


<p>
看來以後可以玩玩看交集、聯集、差集之類的，還有子集合判斷之類的。
</p>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Range Way - 1</h2>
<div class="outline-text-2" id="text-4">
<blockquote>
<p>
A Range represents an interval&#x2014;a set of values with a beginning and
an end.
</p>
</blockquote>

<div class="org-src-container">

<pre class="src src-ruby">range = 0...1000000
how_many = 10000

<span style="color: #586e75;"># </span><span style="color: #586e75;">first way</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">Array::sample Choose a random element or n random elements from the array.</span>
range.to_a.sample(how_many)

<span style="color: #586e75;"># </span><span style="color: #586e75;">second way</span>
(range).sort_by{rand}[0...how_many]
</pre>
</div>

<p>
直接從 Range 裡用內建的方法隨機挑，行數完敗上面那兩個。
</p>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Range Way - 2</h2>
<div class="outline-text-2" id="text-5">
<p>
突然想到如果要在生成時就篩選掉不想要數字的話，要怎麼做？
</p>

<p>
仔細一想很簡單，直接在在範圍裡改。
</p>

<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #586e75;"># </span><span style="color: #586e75;">Delete 2 from the range of rand</span>
(1..4).reject { |x| x==2 }.to_a.sample(how_many)
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">Benchmark them</h2>
<div class="outline-text-2" id="text-6">
</div><div id="outline-container-sec-6-1" class="outline-3">
<h3 id="sec-6-1">Part 1</h3>
<div class="outline-text-3" id="text-6-1">
<div class="org-src-container">

<pre class="src src-ruby">require <span style="color: #2aa198;">'benchmark'</span>

range = 0...1000000
how_many = 10000

<span style="color: #586e75;">## </span><span style="color: #586e75;">Range way - 1</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  range.to_a.sample(how_many)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 0.076334817</span>

<span style="color: #586e75;">## </span><span style="color: #586e75;">Set Way</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  rand_n(how_many, range)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 0.01060032</span>

<span style="color: #586e75;">## </span><span style="color: #586e75;">Normal way - 1</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  get_uniq_nums(how_many, range)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 3.565261117</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6-2" class="outline-3">
<h3 id="sec-6-2">Part 2</h3>
<div class="outline-text-3" id="text-6-2">
<div class="org-src-container">

<pre class="src src-ruby">range = 0...1000000
how_many = 1000000

<span style="color: #586e75;">## </span><span style="color: #586e75;">Set Way</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  rand_n(how_many, range)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 11.305328646</span>

<span style="color: #586e75;">## </span><span style="color: #586e75;">Range way - 1</span>
<span style="color: #b58900;">Benchmark</span>.realtime <span style="color: #859900; font-weight: bold;">do</span>
  range.to_a.sample(how_many)
<span style="color: #859900; font-weight: bold;">end</span>
<span style="color: #586e75;"># </span><span style="color: #586e75;">=&gt; 0.112987391</span>
</pre>
</div>

<p>
Range Way 完敗。 還有沒有實現 Set Way 和 Normal Way 的篩選的功能。
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Org-mode + Octopress + Github 來搭建 Blog]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-23-emacs-org-octopress.html"/>
    <updated>2013-08-23T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/emacs-org-octopress</id>
    <content type="html"><![CDATA[<ul class="org-ul">
<li>優點
<ul class="org-ul">
<li>免費網域、免費託管、免費流量
</li>
<li>版本管理，不用擔心備份！
</li>
<li>Org-mode or Markdown 撰寫效率好
</li>
</ul>
</li>
<li>缺點
<ul class="org-ul">
<li>技術門檻要求較高 <br/>
    需要懂一些 Git, Github, Org-mode 或 Makrdown，更進階要客製化 Blog 的話，可能還要懂些許 Ruby (jekyll)
</li>
<li>Org-mode 的 code block 沒有 markdown&#8217;s code block 的 title url 功能。
</li>
</ul>
</li>
</ul>

<p>
<!-- more -->
</p>

<hr/>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Org-mode</h2>
<div class="outline-text-2" id="text-1">
<blockquote>
<p>
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system. <br/>
<b><a href="http://orgmode.org/">http://orgmode.org/</a></b>
</p>
</blockquote>
<p>
Org-mode 是建立於 Emacs(編輯器) 之上的插件，是一種輕量級的標記語言可以用來做時間管理、筆記、生成 Html &#x2026; ，同類型的流行的還有 Markdown，這篇文章基本上就是
Emacs + org-mode 寫的，之後在透過插件 <a href="https://github.com/yoshinari-nomura/org-octopress">org-octopress</a> 生成給 Octopress 用。
</p>
</div>


<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">Install Emacs(24.x)</h3>
<div class="outline-text-3" id="text-1-1">
<p>
我只會在 Linux 平台上用 Package 裝。
</p>

<p>
一些流行的 Linux distribution 的 Package Manager 安裝方法。
</p>
<div class="org-src-container">

<pre class="src src-sh">pacman -S emacs          <span style="color: #586e75;"># </span><span style="color: #586e75;">Archlinux</span>
apt-get install emacs    <span style="color: #586e75;"># </span><span style="color: #586e75;">Ubuntu</span>
yum install emacs        <span style="color: #586e75;"># </span><span style="color: #586e75;">Fedora</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">Install org and org-octopress</h3>
<div class="outline-text-3" id="text-1-2">
<p>
用 Emacs 裡的 Package Manager 安裝：
</p>
<div class="org-src-container">

<pre class="src src-sh"><span style="color: #586e75;"># </span><span style="color: #586e75;">&#22312;&#23478;&#30446;&#37636;&#24314;&#19968;&#20491; .emacs.d &#36039;&#26009;&#22846;&#24460;&#65292;&#22312;&#35041;&#38754;&#24314; init.el</span>
mkdir ~/.emacs.d
touch ~/.emacs.d/init.el
</pre>
</div>

<p>
在 init.el 添加：
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(add-to-list 'package-archives
  '(<span style="color: #2aa198;">"marmalade"</span> . <span style="color: #2aa198;">"http://marmalade-repo.org/packages/"</span>))

(add-to-list 'package-archives
  '(<span style="color: #2aa198;">"melpa"</span> . <span style="color: #2aa198;">"http://melpa.milkbox.net/packages/"</span>) t)

(package-initialize)
</pre>
</div>

<p>
開啟 Emacs 鍵入 <code>M-x package-install org RET</code> ，把 org 換成 org-octopress 後安裝。
</p>
</div>
</div>
<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">Org-octopress Setup</h3>
<div class="outline-text-3" id="text-1-3">
<p>
以下是從 <a href="https://github.com/yoshinari-nomura/org-octopress">org-octopress</a> 的 README 裡擷取 Basic Settings 的片段。
</p>

<p>
添加在 init.el。
</p>
<ul class="org-ul">
<li>Emacs Settings:
</li>
</ul>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">require</span> '<span style="color: #268bd2; font-weight: bold;">org-octopress</span>)
(setq org-octopress-directory-top       <span style="color: #2aa198;">"~/octopress/source"</span>)
(setq org-octopress-directory-posts     <span style="color: #2aa198;">"~/octopress/source/_posts"</span>)
(setq org-octopress-directory-org-top   <span style="color: #2aa198;">"~/octopress/source"</span>)
(setq org-octopress-directory-org-posts <span style="color: #2aa198;">"~/octopress/source/blog"</span>)
(setq org-octopress-setup-file          <span style="color: #2aa198;">"~/org-sty/setupfile.org"</span>)
</pre>
</div>

<ul class="org-ul">
<li>Octopress Settings:
</li>
</ul>
<p>
In octopress/_config.yml, you must set the permelink attribute: <br/>
<code>permalink: /blog/:year-:month-:day-:title.html</code>
</p>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Octopress</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="http://octopress.org/">Octopress</a> 是一套 Blog 的框架，所以一開始你的 Blog 就有一個簡潔的外觀，功能上有支援 Twitter, Facebook, Delicious 等等，也可以用來產生靜態 Blog 後放在 Github
上，預設是用 Markdown 來撰寫文章。
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Install and Use Octopress</h3>
<div class="outline-text-3" id="text-2-1">
<p>
要先安裝 <a href="http://www.ruby-lang.org/en/">Ruby</a> 和 <a href="http://gitscm.com/">Git</a>。 <br/>
官方的方法： <a href="http://octopress.org/docs/setup/">Octopress Setup</a>
</p>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Github</h2>
<div class="outline-text-2" id="text-3">
<p>
首先有個 <a href="https://github.com/">Github</a> 的帳號後，建立一個 Repository 為 username.github.io，之後去你的 octopress 的根目錄鍵入 <code>bundle exec rake setup_github_page</code> 輸入剛剛建完給你的 url。
</p>

<p>
官方文檔: <a href="https://help.github.com/">GithubHelp</a>
</p>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">基本流程</h2>
<div class="outline-text-2" id="text-4">
<ol class="org-ol">
<li>開啟 Emacs 鍵入 <code>M-x org-octopress RET</code> ，會到 org-octopress 的界面鍵入 <code>w</code>
和標題，開始撰寫文章。
</li>
<li>寫完後，鍵入 <code>C-c C-e P x octopress</code> 來生成靜態網頁
</li>
<li>在你的 octopress 根目錄鍵入 <code>bundle exec rake gen_deploy</code>
</li>
<li>也可以把 source branch 下 push 上去做版本管理 <code>git push -u origin source</code>
</li>
</ol>

<p>
文章打到一半或要做確認的時候用(需先生成靜態網頁) <code>bundle exec rake preview</code> ，之後在
<a href="http://localhost:4000/">http://localhost:4000/</a> 可以看你的 Blog。
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解決 Org-mode(8.x) 轉 Html 中文換行變空格問題]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-19-han-extra-space-org-mode.html"/>
    <updated>2013-08-19T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/han-extra-space-org-mode</id>
    <content type="html"><![CDATA[<p>
基本上是照這兩篇提供的解法去依樣畫葫蘆出來的 org-mode 版本。
</p>
<ul class="org-ul">
<li><a href="http://stackoverflow.com/questions/8550112/prevent-browser-converting-n-between-lines-into-space-for-chinese-characters/8551033#8551033">Prevent browser converting &#8216;\n&#8217; between lines into space (for Chinese characters)</a>
</li>
<li><a href="http://chenyufei.info/blog/2011-12-23/fix-chinese-newline-becomes-space-in-browser-problem/">解决 Markdown 转 HTML 中文换行变空格的问题</a>
</li>
</ul>

<p>
<!-- more -->
</p>

<p>
大致上的解法是將 html 檔案裡，將中文字後有接個換行符的把他合併為一行。 <br/>
感覺上是個 workaround 的方法，如果在餵給 rss 似乎又會有問題，不過我無法忍受那些多餘的空格。
</p>

<p>
代碼如下：
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp">(<span style="color: #859900; font-weight: bold;">defun</span> <span style="color: #268bd2;">han/org-html-delete-extra-space</span> (string backend info)
  <span style="color: #2aa198;">"Let chinese word to a line if match /han\newline/"</span>
  (<span style="color: #859900; font-weight: bold;">when</span> (and (org-export-derived-backend-p backend 'html)
             (string-match <span style="color: #2aa198;">"\\cc\n"</span> string))
    (replace-regexp-in-string <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\cc</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">\n</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\cc</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span> <span style="color: #2aa198;">"\\1\\2"</span> string)))

(<span style="color: #859900; font-weight: bold;">eval-after-load</span> 'ox-html
  '(add-to-list 'org-export-filter-final-output-functions
                'han/org-html-delete-extra-space))
</pre>
</div>

<p>
順便吐槽一下 emacs 裡的 regex，實在太多 <code>\</code> 了 <br/>
這是上面連結文中 Ruby 的 Regex 樣式：
</p>
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #586e75;"># </span><span style="color: #586e75;">\p{Han} &#26159;&#28450;&#23383;</span>
gsub(<span style="color: #2aa198;">/(\p{Han})\n(\p{Han})/</span>m, <span style="color: #2aa198;">'\1\2'</span>)
</pre>
</div>
<p>
這是 Emacs-lisp 的：
</p>
<div class="org-src-container">

<pre class="src src-emacs-lisp"><span style="color: #586e75;">;; </span><span style="color: #586e75;">\\cc &#26159;&#28450;&#23383;</span>
(replace-regexp-in-string <span style="color: #2aa198;">"</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\cc</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">\n</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">(</span><span style="color: #2aa198;">\\cc</span><span style="color: #859900; font-weight: bold;">\\</span><span style="color: #b58900; font-weight: bold;">)</span><span style="color: #2aa198;">"</span> <span style="color: #2aa198;">"\\1\\2"</span> string)
</pre>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Pentadactyl (Firefox add-on)]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-17-my-pentadactyl-tip.html"/>
    <updated>2013-08-17T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/my-pentadactyl-tip</id>
    <content type="html"><![CDATA[<blockquote>
<p>
Pentadactyl is a free browser add-on for Firefox, designed to make browsing more
efficient and especially more keyboard accessible.
</p>
</blockquote>
<p>
<a href="http://5digits.org/pentadactyl/index">Pentadactyl</a> 是一個能讓你快速瀏覽網頁的一個火狐插件，其特點是用 Vim-like 的方式來使用，也可以是說是以鍵盤來做瀏覽動作的一套按法。
</p>
<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">一些使用心得</h2>
<div class="outline-text-2" id="text-1">
<p>
<!-- more -->
先聲明有些是定制後的 Pentadactyl 才有的，所以預設的行為會和以下有些出入，還有我的鍵盤的敏感度也調高了。
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">快速移動</h3>
<div class="outline-text-3" id="text-1-1">
<p>
按鍵 <code>j k</code> 分別為上下移動網頁約5%， <code>h l</code> 為切換瀏覽至左和右邊的 Tab <code>space</code> 為向下一個 page ，加前綴 shift 為上。僅僅這些基礎移動就大大超越還在用和滑鼠點擊分頁的我了！但失去滑鼠滾輪還是有差別的，所以我的使用習慣變為 <code>space</code> 在網頁上下移動後，之後使用 <code>j k</code> 微調一下。 <code>gg</code> 和 <code>G</code> 為頁首和尾。還有 Mark 頁面的功能呢！
</p>
</div>
</div>

<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">如何點超連結？</h3>
<div class="outline-text-3" id="text-1-2">
<p>
這有點說不清，實際用的情況是 <code>f</code> 後連結上頭會跑出英文字母，之後在照順序輸入你眼睛盯著的連結上的英文字母， <code>F</code> 則是會開新分頁，是一個很實用的功能，我把連結上頭出現的東西改成以 <code>asdfjkl;</code> 排，這樣八個鍵，連移動手指頭都不需要！
</p>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">開啟網頁</h3>
<div class="outline-text-3" id="text-1-3">
<p>
<code>o</code> 在當前頁面開啟網頁， <code>t</code> 為開在新分頁，開啟後鍵入關鍵字，預設會使用 Google 搜尋，有個很棒的功能叫 Auto-Completion ，使用時會根據關鍵字給予補全，這類似你在
Google 的搜尋欄鍵入關鍵字時會從下方跑出一個列表供你選擇，常用補全的東西有歷史紀錄和剛剛提到搜尋引擎的補全，更多其他補全我也還不清楚但已經很夠用了。
</p>

<p>
例如輸入個巴會出現我最近看到的和巴哈姆特有關聯的網址和 title 但卻還跑出和巴士海峽相關的東西，當然能允許你更精確列出來，接個空白鍵和 gamer 或哈，就會產生更加有關聯的資訊了。
</p>
</div>
</div>

<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">其他實用的功能</h3>
<div class="outline-text-3" id="text-1-4">
<p>
<code>r</code> 為更新網頁、 <code>d</code> 為刪除 、 <code>b</code> 則是變成文字輸出你的分頁後選擇， <code>數字+b</code> 則是直接跳轉至指定Tab， <code>/</code> 是搜尋當前頁面， <code>u</code> 回復剛關閉的頁面也能補全最近關過的頁面， <code>Esc</code> 取消，其他的上官網看吧。
</p>
</div>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">一個小短片</h2>
<div class="outline-text-2" id="text-2">
<p>
兩分鐘的影片
</p>

<p>
<a href="http://youtu.be/BuANeWJR-lM">Pentadactyl show on youtube</a>
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一次寫 Blog]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-17-first-write-blog.html"/>
    <updated>2013-08-17T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/first-write-blog</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Why?</h2>
<div class="outline-text-2" id="text-1">
<p>
上大學後發現太久沒寫文章過，想練練撰寫文章的能力，所以創了個 Blog 在 github 。
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">主要 Blog 的內容</h2>
<div class="outline-text-2" id="text-2">
<p>
分享一些跟技術或電腦有關的心得，由於撰寫能力不知道退化到什麼地步，以少量多篇慢慢開始吧！
</p>


<p>
<!-- more -->
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初入網頁設計]]></title>
    <link href="http://XuHaoJun.github.io/blog/2013-08-17-about-web-programming.html"/>
    <updated>2013-08-17T00:00:00+08:00</updated>
    <id>http://XuHaoJun.github.io/blog/about-web-programming</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">因為暑假很無聊，所以&#x2026;</h2>
<div class="outline-text-2" id="text-1">
<p>
來學學網頁設計！
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">初入 Web</h2>
<div class="outline-text-2" id="text-2">
<p>
關於網頁的知識處於懵懵懂懂的狀態，所去了<a href="http://www.codecademy.com/"> Codecademy</a> 學了些基本的 Html 和 Css 語法後
<!-- more -->看到了也有 Ruby 的教學，靈光一閃想起了一個東西 <code>Ruby on Rails</code> ，一個Web應用框
架！結束了在 Codecademy 的 Ruby 教學，遂開始了 Rails 的<a href="http://ihower.tw/rails3/index.html">學習</a> ，不料這完完全全就是個坑，什麼
<code>MVC架構</code> 和 <code>Restful</code> 還有 Ruby 的 =Convention over configuration=對新手來說實在太痛了，
我看在撐一個禮拜看能不能習慣。
</p>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">結論</h2>
<div class="outline-text-2" id="text-3">
<p>
雖然學了些東西不過還是沒有對做一個網頁有什麼實體的感覺，看到一些Rails的課程著重於實
戰，真心想報名!，不過暑假快過完了，我看就靠自己摸索吧。
</p>
</div>
</div>
]]></content>
  </entry>
  
</feed>
